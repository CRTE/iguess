<%# If you include this file, you need to provide a doneProcessing method that gets
    run when all incoming datasets have been fully processed %>

<script type="text/javascript">

// Callback for WMS get capabilities success
  var onWmsGetCapabilitiesSucceeded = function(dataProxy, records)
  {
    processIncomingLayers(dataProxy, records.length, 'WMS');
  };


  // Callback for WFS get capabilities success
  var onWfsGetCapabilitiesSucceeded = function(dataProxy, records)
  {
    processIncomingLayers(dataProxy, records.length, 'WFS');
  };


 // Callback for WCS get capabilities success
  var onWcsGetCapabilitiesSucceeded = function(dataProxy, records)
  {
    processIncomingLayers(dataProxy, records.length, 'WCS');
  };

  var onWmsGetCapabilitiesFailed = function() {  
    console.log("WMS GetCapabilities failed");
    console.log(arguments);

    $('#layer-display').html('<div class="form_error_message">Error: Either this is an invalid address, or the WMS server is not responding.</div>');

    $('#layer_name_error_message').text("Error: Layer could not be retrieved from the server");
    $('#dataset_layer_name').html('<option>No layer names available</option>');

    $('#submit_error_message').text("Cannot submit form until all errors are corrected");
    $('#dataset_layer_name').prop('disabled', true);
    $('#submit_form_button').prop('disabled', true);

    $('#layers_loading_indicator').hide();
    // $('#refresh_layers_button').attr('disabled', false);
    doneProcessing('???', 'WMS', null, 'ERROR');
  };


  var onWfsGetCapabilitiesFailed = function() {   
    console.log("WFS GetCapabilities failed");
    console.log(arguments);
    showPreErrorMessage(i);

    doneProcessing('???', 'WFS', null, 'ERROR');
  };

  var onWcsGetCapabilitiesFailed = function() {   
    console.log("WCS GetCapabilities failed");
    console.log(arguments);
    showPreErrorMessage(i);

    doneProcessing('???', 'WCS', null, 'ERROR');
  };


  var getWmsLayers = function(registeredDataServers)
  {
    var serverCount = registeredDataServers.length;

    for(var i = 0; i < serverCount; i++) {
      WFS.updateLayerList(registeredDataServers[i], onWmsGetCapabilitiesSucceeded, onWmsGetCapabilitiesFailed);
    }
  };


  var getWfsLayers = function(registeredDataServers)
  {
    var serverCount = registeredDataServers.length;

    for(var i = 0; i < serverCount; i++) {
      WFS.updateLayerList(registeredDataServers[i], onWfsGetCapabilitiesSucceeded, onWfsGetCapabilitiesFailed);
    }
  };


  var getWcsLayers = function(registeredDataServers)
  {
    var serverCount = registeredDataServers.length;

    for(var i = 0; i < serverCount; i++) {
      WCS.updateLayerList(registeredDataServers[i], onWcsGetCapabilitiesSucceeded, onWcsGetCapabilitiesFailed);
    }
  };


  // Basic dataset object -- this is what we track for datasets seen on remote server
  var Dataset = function(server, record, type) {
    this.server     = server;
    this.identifier = record.get("name") || record.id;
    this.title      = record.get("title") || record.get("name");
    this.abstract   = record.get("abstract");
    this.type       = [type];
    
    this.srs  = null;
    this.bbox = null;

    this.setSrs  = function(srs)  { this.srs = srs; }
    this.setBbox = function(bbox) { this.bbox = bbox; }
  };


  discoveredLayers = {};

  var foundDataset = function(dataset, service)
  {
    var layerId = registeredDatasets[dataset.server][dataset.identifier];

    if(layerId in discoveredLayers) {   // Already found this layer, add service to it

      if(discoveredLayers[layerId].type.hasObject(service)) {    // Will happen if duplicate names are used on the server
        return;
      }

      discoveredLayers[layerId].type.push(service);
      if(dataset.srs !== null) {
        discoveredLayers[layerId].srs = dataset.srs;
      }
      if(dataset.bbox !== null) {
        discoveredLayers[layerId].bbox = dataset.bbox;
      }
    }
    else {    // New layer, add it to discoveredLayers
      discoveredLayers[layerId] = dataset;
    }

    $(".dataset-title-" + registeredDatasets[dataset.server][dataset.identifier]).text(dataset.title);
  };


  // Handles results from WMS, WFS, and WCS getCapabilities calls
  var processIncomingLayers = function(dataProxy, count, service)
  {
    var serverUrl;

    if     (service == 'WFS') { serverUrl = WFS.unwrapServer(dataProxy.url); }
    else if(service == 'WMS') { serverUrl = WMS.unwrapServer(dataProxy.url); }
    else if(service == 'WCS') { serverUrl = WCS.unwrapServer(dataProxy.url); }
    else { alert('Unexpected type ' + service); }

    for(var i = 0; i < count; i++) {
      var record = dataProxy.getAt(i);
      var dataset = new Dataset(serverUrl, record, service);

      if(service == 'WMS') {
        dataset.setSrs (record.data.srs);
        dataset.setBbox(record.data.bbox);
      }
      else console.log(record);


      foundDataset(dataset, service);
    }

    var serviceInfo = (dataProxy.reader && dataProxy.reader.raw && dataProxy.reader.raw.service) || null;
    doneProcessing(serverUrl, service, serviceInfo, 'OK');
  };

</script>
