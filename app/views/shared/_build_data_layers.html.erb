<%# If you include this file, you need to provide a doneProcessing method that gets
    run when all incoming datasets have been fully processed %>

<script type="text/javascript">

// Callback for WMS get capabilities success
  var onWmsGetCapabilitiesSucceeded = function(dataProxy, records)
  {
    processIncomingLayers(dataProxy, records, 'WMS');
  };


  // Callback for WFS get capabilities success
  var onWfsGetCapabilitiesSucceeded = function(dataProxy, records)
  {
    processIncomingLayers(dataProxy, records, 'WFS');
  };


 // Callback for WCS get capabilities success
  var onWcsGetCapabilitiesSucceeded = function(dataProxy, records)
  {
    processIncomingLayers(dataProxy, records, 'WCS');
  };

  var onWmsGetCapabilitiesFailed = function() {  
    console.log("WMS GetCapabilities failed");
    console.log(arguments);

    $('#layer-display').html('<div class="form_error_message">Error: Either this is an invalid address, or the WMS server is not responding.</div>');

    $('#layer_name_error_message').text("Error: Layer could not be retrieved from the server");
    $('#dataset_layer_name').html('<option>No layer names available</option>');

    $('#submit_error_message').text("Cannot submit form until all errors are corrected");
    $('#dataset_layer_name').prop('disabled', true);
    $('#submit_form_button').prop('disabled', true);

    $('#layers_loading_indicator').hide();
    // $('#refresh_layers_button').attr('disabled', false);
    doneProcessing('???', 'WMS', null, 'ERROR');
  };


  var onWfsGetCapabilitiesFailed = function() {   
    console.log("WFS GetCapabilities failed");
    console.log(arguments);
    showPreErrorMessage(i);

    doneProcessing('???', 'WFS', null, 'ERROR');
  };

  var onWcsGetCapabilitiesFailed = function() {   
    console.log("WCS GetCapabilities failed");
    console.log(arguments);
    showPreErrorMessage(i);

    doneProcessing('???', 'WCS', null, 'ERROR');
  };


  var getWmsLayers = function(registeredDataServers)
  {
    var serverCount = registeredDataServers.length;

    for(var i = 0; i < serverCount; i++) {
      WFS.updateLayerList(registeredDataServers[i], onWmsGetCapabilitiesSucceeded, onWmsGetCapabilitiesFailed);
    }
  };


  var getWfsLayers = function(registeredDataServers)
  {
    var serverCount = registeredDataServers.length;

    for(var i = 0; i < serverCount; i++) {
      WFS.updateLayerList(registeredDataServers[i], onWfsGetCapabilitiesSucceeded, onWfsGetCapabilitiesFailed);
    }
  };


  var getWcsLayers = function(registeredDataServers)
  {
    var serverCount = registeredDataServers.length;

    for(var i = 0; i < serverCount; i++) {
      WCS.updateLayerList(registeredDataServers[i], onWcsGetCapabilitiesSucceeded, onWcsGetCapabilitiesFailed);
    }
  };


  // Basic dataset object -- this is what we track for datasets seen on remote server
  var Dataset = function(serverUrl, type, record) 
  {
    this.serverUrl = serverUrl;
    this.type      = [type];

    this.identifier  = null;
    this.name        = null;
    this.title       = null;
    this["abstract"] = null;
    this.format      = null;
    this.srs         = null;
    this.bbox        = {left: null, right: null, top: null, bottom: null};
    this.resolution  = {x: null, y:null};

    if(record) {
      this.identifier  = record.get("name")  || record.id;
      this.title       = record.get("title") || record.get("name");
      this["abstract"] = record.get("abstract");    // abstract is a js reserved word!
    }
  };


  discoveredLayers = {};

  // Gets run on any layer found, registered or not; dataset is an object
  var foundDataset = function(dataset, service)
  {
    var key = cssEscape(dataset.serverUrl + dataset.identifier);   // Need a single key to make iteration elsewhere easier

    var layer = discoveredLayers[key];

    if(layer) {   // Already found this layer, add service to it

      if(layer.type.hasObject(service)) {    // Will happen if duplicate names are used on the server
        return;
      }

      layer.type.push(service);
      if(dataset.srs !== null) {
        layer.srs = dataset.srs;
      }
      if(dataset.bbox !== null) {
        layer.bbox = dataset.bbox;
      }
    }
    else {    // It's a new layer, add it to discoveredLayers
      discoveredLayers[key] = dataset;
    }

    // alert(registeredDatasets[dataset.serverUrl][dataset.identifier] + "   " + service);

    // If this is a registered layer, update its title now (unregistered layers aren't displayed here)
    if(registeredDatasets[dataset.serverUrl] && registeredDatasets[dataset.serverUrl][dataset.identifier])
      $(".dataset-title-" + registeredDatasets[dataset.serverUrl][dataset.identifier]).text(dataset.title);
  };


  var wcsReplies = {};

  // Handles results from WMS, WFS, and WCS getCapabilities calls
  var processIncomingLayers = function(dataProxy, records, service)
  {
    var serverUrl;

    if     (service === 'WFS') { serverUrl = WFS.unwrapServer(dataProxy.url); }
    else if(service === 'WMS') { serverUrl = WMS.unwrapServer(dataProxy.url); }
    else if(service === 'WCS') { 
      // WCS is more complex, because we need two queries to get what we need, and we don't want to proceed until
      // we have heard back from both
      serverUrl = WCS.unwrapServer(dataProxy.url);

      if(wcsReplies[serverUrl] === undefined) 
        wcsReplies[serverUrl] = {};
    }
    else { alert('Unexpected type ' + service); }

    var ready = true;

    for(var i = 0, len = records.length; i < len; i++) {
      var record = records[i];

      if(service === 'WMS' || service === 'WFS') {
        var dataset = new Dataset(serverUrl, service, record);

        if(service === 'WMS') {
          dataset.srs  = record.data.srs;
          dataset.bbox = record.data.bbox;
        }

        foundDataset(dataset, service);
      }

      else if(service === 'WCS') {
        var id = record.id;

        if(!wcsReplies[serverUrl][id])
        {
          wcsReplies[serverUrl][id] = new Dataset(serverUrl, service);
          ready = false;
        }

        var dataset = wcsReplies[serverUrl][id];

        if(dataProxy.reader.meta.format.name === 'WCSCapabilities') {
          // GetCapabilities response
          dataset.identifier  = record.id;
          dataset.name        = record.get("name");
          dataset.title       = record.get("title");
          dataset["abstract"] = record.get("abstract");
        }
        else {
          // DescribeCoverage response
          dataset.format      = record.get("supportedFormats")[0];
          dataset.srs         = record.get("nativeCRS");
          dataset.bbox        = record.get("nativeBoundingBox");
          dataset.resolution  = record.get("gridOffsets");
        }

        if(ready)
          foundDataset(dataset, service);
      }
    }

    if(ready) {
      var serviceInfo = (dataProxy.reader && dataProxy.reader.raw && dataProxy.reader.raw.service) || null;
      doneProcessing(serverUrl, service, serviceInfo, 'OK');
    }
  };

</script>
