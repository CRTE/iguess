<%# This function builds a list of data layers that are registered, and are thus stored in the database.
    Layers are actually objects with a type and rubyId field.  Display name should come from the data server itself, and will
      be retrieved separately %>

<script type="text/javascript">
  registeredDataLayers = {};

  <%= @datasets.reject{ |d| d.finalized == false }.
                map{ |d| "registeredDataLayers[" + d.id.to_s() + "] = {" +
                            "identifier:'" + d.dataset_type + "'," +
                            "id:"          + d.id.to_s()    + ","  +
                            "configCount:" + d.mod_configs.count.to_s() + 
                          "};\n"
                    }.
                join(' ') %>


  registeredDataServers = [<%= @datasets.reject{|d| d.dataset_type == "Mapping Only"}
                                        .uniq  {|d| d.server_url}
                                        .map   {|d| "'" + d.server_url.gsub('\\') { '\\\\\\' } + "'"}
                                        .join(',') %>];

  var registeredDatasets  = { };

  var id = 1;

  // Create an association between a server and all registered datasets it hosts.
  // That is, registeredDatasets[url][identifier] = someUniqueId for every registered dataset.
  // We'll use the database id of the dataset as that unique number, so we can use it for talking with the server.

  <% @dataserver_urls.each do |url| %>    <%# These could be wms, wfs, or wcs addresses %>

    registeredDatasets['<%= url.gsub(/\\/, '\\\\\\') %>'] = {};

    <%= @datasets.reject { |d| d.server_url != url }
          .map{ |d| "registeredDatasets['" + url.gsub(/\\/, '\\\\\\') + "']['" + d.identifier + "'] = " + d.id.to_s() + ";" }
          .join(' ') %>
  <% end %>   
                                       
</script>
