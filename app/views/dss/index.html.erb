<script type="text/javascript">
 
 var mapProjection = "EPSG:28992";
 
 // Avoid pink error tiles
 OpenLayers.IMAGE_RELOAD_ATTEMPTS = 3;
 OpenLayers.Util.onImageLoadErrorColor = "transparent";
 
 var buildsGML;
 
//create a style object
var style = new OpenLayers.Style();
//rule used for all polygons
var rule_fsa = new OpenLayers.Rule({
	symbolizer: {
		fillColor: "#DDDD00",
		fillOpacity: 0.6,
		strokeColor: "#DDDD00",
		strokeWidth: 1,
	}
});

var rule_highlight = new OpenLayers.Rule({
	filter: new OpenLayers.Filter.Comparison({
		type: OpenLayers.Filter.Comparison.GREATER_THAN,
		property: "cat",
		value: 1000,
	}),
	symbolizer: {
		fillColor: "#FF7144",
		fillOpacity: 0.5,
		strokeColor: "#FF7144",
		strokeWidth: 2,
		strokeDashstyle: "solid",
	}
});

style.addRules([rule_fsa, rule_highlight]);

var winPanel = new Ext.Window({
	title: 'Potential Application', //Title of the Window 
	id: 'panelWindowId', //ID of the Window Panel
	autoHeight: true, //Height of the Window will be auto
	width:300, //Width of the Window
	resizable: false, //Resize of the Window, if false - it cannot be resized
	closable: false, //Hide close button of the Window
	modal: false, //When modal:true it make the window modal and mask everything behind it when displayed
	contentEl: 'divWindowId' //ID of the respective 'div'
	});
	
var map = null;

function initMap(){
	
	//debugger;
	
	var bounds = new OpenLayers.Bounds(91979, 436326, 92617, 437659.5);

	map = new OpenLayers.Map("SliderMap",{
		projection: new OpenLayers.Projection(mapProjection),
		units: "m",
		maxExtent: bounds,
	});
	
	map.addControl(new OpenLayers.Control.LayerSwitcher());
	
	var streets =  new OpenLayers.Layer.WMS(
    	"Streets",
    	"http://weastflows.tudor.lu/cgi-bin/mapserv?map=/var/www/MapFiles/Rotterdam02.map",
        {layers: "Streets", 
         format: "image/png",
         srsName: mapProjection,
	 	 transparent: "true",
     	 projection: new OpenLayers.Projection(mapProjection)},
        {isBaseLayer: true,  
     	 visibility: true}
    );
       
    buildsGML = new OpenLayers.Layer.Vector("BuildingsGML", {
        protocol: new OpenLayers.Protocol.HTTP({
            url: "assets/BuildingsFull.gml",
            format: new OpenLayers.Format.GML()
        }),
        styleMap: style,
        strategies: [new OpenLayers.Strategy.Fixed()]
    });

	map.addLayers([streets, buildsGML]);

}

var tipSlider;
var potSlider, capSlider, invSlider;

Ext.onReady(function(){
	  
    potSlider = new Ext.Slider({
        renderTo: 'slider-potential',
        width: 214,
        value: 0,
        minValue: 0,
        maxValue: 1000,
        plugins: new Ext.ux.SliderTip()
    });
    
    invSlider = new Ext.Slider({
        renderTo: 'slider-investment',
        width: 214,
        value: 0,
        minValue: 0,
        maxValue: 6000,
        plugins: new Ext.ux.SliderTip()
    });
    
    capSlider = new Ext.Slider({
        renderTo: 'slider-capacity',
        width: 214,
        value: 0,
        minValue: 0,
        maxValue: 10000,
        plugins: new Ext.ux.SliderTip()
    });
    
	potSlider.on('change', potDragged, this);
	capSlider.on('change', capDragged, this);
	invSlider.on('change', invDragged, this);
	
	initMap();
	
});

var lock = false;

function potDragged(ed, value, oldValue) {
	
	newSliderValues(potSlider.thumbs[0].value / 10);
}

function invDragged(ed, value, oldValue) {
	
	newSliderValues((invSlider.getValue() + 0.0) / (invSlider.maxValue + 0.0) * 100);
}

function capDragged(ed, value, oldValue) {
	
	newSliderValues((capSlider.getValue() + 0.0) / (capSlider.maxValue + 0.0) * 100);
}

function newSliderValues(percent) {
	
	if(!lock)
	{
		// Since the browser is single threaded this is safe.
		lock = true;
		percent = parseInt(percent);
		
		document.getElementById("percent").innerHTML  = "Potential: "  + percent + " %";
		document.getElementById("invest").innerHTML   = "Investment: " + percent * invSlider.maxValue / 100 + " k&euro;";
		document.getElementById("capacity").innerHTML = "Capacity: "   + percent * capSlider.maxValue / 100 + " kWp";
		
		invSlider.setValue(percent * invSlider.maxValue / 100);
		capSlider.setValue(percent * capSlider.maxValue / 100);
		potSlider.setValue(percent * potSlider.maxValue / 100);
		
		rule_highlight.filter.value = 1000 - potSlider.getValue();
		buildsGML.redraw();
		lock = false;
	}
}

function showWindow() {
	
	winPanel.show();
	
}
 
</script>

 	<a href=# onClick="showWindow();">Show window</a>
 	<div  style="width:100%; height:800px; min-height:100%; background:white" id="MiniMap">
 	</div>
 	<br/>
	
	
	<div title="divWindowId" id="divWindowId" class="x-hidden" style="padding:10px">
	<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam a vestibulum sem. In a elit ipsum, at cursus enim. Nullam non dui tellus, vitae vestibulum tortor. Aliquam gravida tellus lorem, quis consectetur quam. Donec mollis auctor nunc eget scelerisque.</p>
	<p>Vivamus dignissim diam in ligula semper vestibulum. Aenean luctus nisi in metus ultrices eu congue odio sodales. Aenean volutpat viverra est, at feugiat libero commodo ut. Maecenas at quam eget libero feugiat ullamcorper quis placerat ligula. Aliquam et tortor vitae enim viverra faucibus.</p>
	<br>
	<br>
	<h4 id="percent">Potencial: 0 %</h4>
	<div id="slider-potential"></div>
	<br>
	<br>
	<h4 id="capacity">Capacity: 0 kWp</h4>
	<div id="slider-capacity"></div>
	<br>
	<br>
	<h4 id="invest">Investment: 0 k&euro;</h4>
	<div id="slider-investment"></div>
	<br>
	<br>
	<input type="button" value="Close" onClick="winPanel.hide();"/>
	<br/>
	</div>

   <script type="text/javascript">  // Activate the tabs
      // perform JavaScript after the document is scriptable.
      $(function() {
          // setup ul.tabs to work as tabs for each div directly under div.panes
          $("ul.dosomething").tabs("div.panes > div");
      });
   </script>



    <br />
    <br />
    <br />

  </div>
