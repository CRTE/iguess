<%= render :partial => '/shared/make_railsid_lookup.html.erb' %>

<%# Include some map related utility functions; these need to be processed by Rails so they have to be in a partial %>
<%= render :partial => '/shared/map_utils.html.erb' %>


<script type="text/javascript">

 $(document).ready(function() {
    onLocationChanged('<%= @current_city.name %>');   // Build the initial dataset list
    // $('#sortable_table').tablesorter();               // Initialize sorter
  });


  // This gets run when user changes city dropdown
  var onLocationChanged = function(cityName) {
    // Retrieve all datasets for specified city
    MapUtils.retrieveDatasetsForCity(cityName, function(data){ renderTable(data); });

    // Notify WebGIS that things have changed
    <% for city in City.all %>
      if(cityName == "<%= city.name %>")
      {
        var proj = new OpenLayers.Projection("<%= city.srs %>");
        var point = new OpenLayers.LonLat(
                (<%= city.minx %> + <%= city.maxx %>) / 2,
                (<%= city.miny %> + <%= city.maxy %>) / 2);
        point.transform(proj, WebGIS.map.getProjectionObject());

        WebGIS.map.setCenter(point, <%= city.zoom %>);

        $('.all-layers').hide();
        $('.layer-for-city-<%= city.id %>').show();

        return;
      }
    <% end %>
  }
</script>


<script type="text/javascript">
  $(function() {
    var theTable = $('#sortable_table')

    theTable.find("tbody > tr").find("td:eq(1)").mousedown(function(){
      $(this).prev().find(":checkbox").click()
    });

    $("#filter").keyup(function() {
      $.uiTableFilter( theTable, this.value );
    })

    $('#filter-form').submit(function(){
      theTable.find("tbody > tr:visible > td:eq(1)").mousedown();
      return false;
    }).focus(); //Give focus to input field
  });
</script>



<script type="text/javascript">
// Generate html for Registered Datasets table row
  // Note: status-xxx below are classes that are common to all datasets on a server
  //       status2-xxx are classes that are common only to server-identifier pairs (i.e. duplicate datasets)
  var renderTableRow = function(dataset) {

    return '<tr><td>' +
              '<a href=# class="dataset-name2-' + dataset.id + '">Retrieving name...</a>' + 
           '</td></tr>';

//<img src="/assets/small_question_mark.gif" class="info-icon" alt="More info" rel="#infotable-' + railsId + '">
    // return '<tr class="layer-for-city-< %= d.city_id %> all-layers">' +  
    //          '<td class="dataset-name-' + serverUrlIdLookup[dataset.server_url] + '">' + 
    //            '<a href=# onclick="WebGIS.addNewLayer(\'XXX\',\'< %= d.server_url%>\',\'< %= d.identifier%>'\)" class="dataset-name2-' + railsId + '">Retrieving...</a>
    //         
    //       </td>
    //     </tr>




    // return '<tr id="dataset-id-' + dataset.id + '" onmouseover="$(this).find(\'.invisible-cell\').show();"' +
    //                                               'onmouseout ="$(this).find(\'.invisible-cell\').hide();">' +
    //   '<td class="dataset-name-' + serverUrlIdLookup[dataset.server_url] + '">' +
    //     '<span class="dataset-name2-' + railsId + '">Retrieving...</span>' +
    //     '<img src="/assets/small_question_mark.gif" class="info-icon" ' +
    //               'alt="More info" rel="#infotable-' + railsId + '">' +
    //   '</td>' +
    //   '<td nowrap>' + (dataset.dataset_type == "" ? "Unknown" : dataset.dataset_type) + '</td>' +
    //   '<td width=145><div class="status-' + serverUrlIdLookup[dataset.server_url] + 
    //     ' status2-' + railsId + '">Probing server...  ' +
    //     '<img src="/assets/loading_spinner.gif"></div></td>' +
    //   '<td class="invisible-cell"><a href="/datasets/' + dataset.id + '" ' + 
    //     'data-confirm="Are you sure you want to unregister this dataset?" data-method="delete" ' +
    //     'data-remote="true" rel="nofollow">Unregister</a></td> ' + 
    //   // '<td>SHOW MODULE LIST HERE??</td>' +
    // '</tr>';
  }


  // We've got a new batch of datasets to display!
  // Note that for the status div, all rows from the same server share the same class.  Each has a unique id.
  var renderTable = function(datasets) {

    WebGIS.clearLayers(false);

    $('#dataset-list').empty();    // Clear table

    for(var i = 0; i < datasets.length; i++) {
      var dataset = datasets[i];

      var railsId = railsIdLookup[makeKey(dataset.server_url, dataset.identifier)];
      $('#dataset-list').append(renderTableRow(dataset));

      // $('#infotables').append(renderInfoTable(dataset, railsId));

      processUrl(dataset.server_url);
    }

    $('img[rel]').overlay();    // Set up the layer info overlays
    $('img[rel]').click(function(){ hideDetails() });   // Close details panel on open

    $('.show-details').click(function(){ showDetails(); });


          // Make sure table is sorted
      // var sorting = [[1,0], [0,0]]; 
      // // sort on the first column 

      // $('#sortable_table').trigger("update"); 
      // $('#sortable_table').trigger("sorton",[sorting]); 
  }


  $(document).bind('ajax:success', function(xhr, data, status) { 
    $('#dataset-id-' + data).hide();
  });


  // The following creates a mapping of server urls to short unique tokens, in both ruby and javascript.
  <% serverUrlIdLookup = { } %>
  <% @datasets.reject{ |d| d.finalized == false }
              .map{ |d| serverUrlIdLookup[d.server_url] = d.id.to_s } %>

  serverUrlIdLookup = { };
  <% lines = "" %>
  <% serverUrlIdLookup.each{ |u, i| lines += "serverUrlIdLookup['" + u + "'] = '" + i + "'; " } %>
  <%= raw lines %>

</script>


<script type="text/javascript">
  $(function() {
    var theTable = $('#sortable_table')

    theTable.find("tbody > tr").find("td:eq(1)").mousedown(function(){
      $(this).prev().find(":checkbox").click()
    });

    $("#filter").keyup(function() {
      $.uiTableFilter( theTable, this.value );
    })

    $('#filter-form').submit(function(){
      theTable.find("tbody > tr:visible > td:eq(1)").mousedown();
      return false;
    }).focus(); //Give focus to input field
  });
</script>


<script type="text/javascript">
  // Server has responded to our query and seems happy (from updateLayerList)
  // Explanation of args: http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.DataProxy-event-load
  function onGetCapabilitiesSucceeded(dataProxy, records, options) // Need to validate each item in dataProxy
  {
    var format  = dataProxy.format.name;
    var url     = unwrapServer(dataProxy.url, format);
    var service = getService(format);

    serverResponses[url].push( new ServerResponse(true, records.length, dataProxy, service));
                                                  
    setLayerStatus(url);
  }


  // We pepper each server with WMS, WFS, and WCS requests.  One of these has failed, 
  // which might be bad, or it might be perfectly fine.  It might mean that the server 
  // is down, or that it has not been configured to respond to a particular service.

  // Explanation of args: http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.DataProxy-event-exception
  function onGetCapabilitiesFailed(dataProxy, type, action, options, response, arg)
  {
    // status.responseText has response from data server?

    var format  = options.reader.meta.format.name;
    var url     = unwrapServer(dataProxy.url, format);
    var service = getService(format);


    serverResponses[url].push( new ServerResponse(false, 0, null, service, 
                                                  response.status, response.responseText) );

    // alert("Error retrieving data -- see console for details!");
    console.log("Failure!",arguments);

    // server xxx does not support service yyy ???

    setLayerStatus(url);
  }


  function updateLayerInfo(serverUrl, dataset, available, name, descr, services) {

    var railsId = railsIdLookup[makeKey(serverUrl, dataset)];

    var serviceStr;

    if(services.length == 0)
      serviceStr = 'None';
    else
      serviceStr = services.join(', ');


    WebGIS.addNewLayer(name, serverUrl, dataset, false);


    $('.dataset-name2-' + railsId).html(name);    // Appears in the name column, also on infotable popup
    $('.dataset-descr-' + railsId).html(descr);
    $('#services-'      + railsId).html(services);

    if(available) {
      $('.status2-' + railsId).html(
        '<img class="status-indicator" src="/assets/layer_available_yes.png" alt="Layer available">');
    } else {
      $('.status2-' + railsId).html('<img class="status-indicator" src="/assets/layer_available_no.png" alt="Layer not available">');
    }
  }
</script>



<div style="float: left; width:100%; min-height:100%; margin:2px;" id="BroadMap"><!-- Map goes here --></div>

