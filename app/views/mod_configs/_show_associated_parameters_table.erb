<!-- Our HTML -->
<!-- Print a table of parameters for the module specified in mod -->
<script>
  // Create a structure of registered datasets organized by identifier -- this will make retrieval below much more efficient
  var registeredDataLayersByTag = {};    // Indexed by tag
  var registeredDataLayersById  = {};    // Indexed by datasetId

  <%= raw @datasets.reject{ |d| d.finalized == false }            # Only show datasets marked as finalized
               .reject{ |d| d.city_id != @current_city.id }       # Only show datasets for current city
               .map{ |d| d.dataset_tags.map { |t| 
                  "if(!registeredDataLayersByTag['" + t.tag + "']) registeredDataLayersByTag['" + t.tag + "'] = [];" + 
                  "registeredDataLayersByTag['" + t.tag + "'].push({" +
                            "identifier:'" + d.identifier + "'," +
                            "datasetId:"   + d.id.to_s() + "," +
                            "serverUrl:'"  + d.server_url.gsub('\\') { '\\\\' } + "'" +
                          "});\n" +
                          "registeredDataLayersById[" + d.id.to_s() + "] = " +
                                "registeredDataLayersByTag['" + t.tag + "'][length - 1];\n"
                    } }
                .join('') %>

  var datasets = {};
  <%= raw @datasets.reject{ |d| d.finalized == false && d.alive == false }
               .map{ |d| 'datasets[' + d.id.to_s() + '] = ' + d.to_json + ";\n" }
               .join('') %>     


  // datasets[684] = {"abstract":"This a demo data set of urban landuse in the Ludwigsburg city","alive":true,"city_id":3,"created_at":"2013-05-22T10:04:56Z","dataserver_id":9,"dataset_type":null,"finalized":true,"id":684,"identifier":"LB_urban_landuse","last_seen":"2013-05-22T10:04:56Z","published":false,"server_url":"http://services.iguess.tudor.lu/cgi-bin/mapserv?map=/var/www/MapFiles/LB_localOWS_test.map","service":"WFS","title":"LB urban landuse","updated_at":"2013-05-22T10:04:56Z"};               


  var updateHiddenFields = function(parameterIdentifier, dataset)  // Note that dataset can be undefined
  {
    $('#hidden-field-' + parameterIdentifier + '-srs')        .val('<%= @current_city.srs %>');
    $('#hidden-field-' + parameterIdentifier + '-dformat')    .val(dataset ? dataset.format       : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-left')  .val(dataset ? dataset.bbox_left    : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-right') .val(dataset ? dataset.bbox_right   : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-top')   .val(dataset ? dataset.bbox_top     : "");
    $('#hidden-field-' + parameterIdentifier + '-bbox-bottom').val(dataset ? dataset.bbox_bottom  : "");
    $('#hidden-field-' + parameterIdentifier + '-res-x')      .val(dataset ? dataset.resolution_x : "");
    $('#hidden-field-' + parameterIdentifier + '-res-y')      .val(dataset ? dataset.resolution_y : "");
  };


  // modeName will be "input" or "output"
  var createDatasetSelectionControls = function(parameterIdentifier, modeName)
  {
    var ctrl = $(document.createElement('select'))
            .attr('name', 'datasets[' + parameterIdentifier + ']')
            .attr('id', parameterIdentifier + modeName);

    // Make sure we have at least an empty list for this identifier
    if(!registeredDataLayersByTag[parameterIdentifier])
      registeredDataLayersByTag[parameterIdentifier] = [];

    for(var i = 0, len = registeredDataLayersByTag[parameterIdentifier].length; i < len; i++) {
      var title = 'Unknown Title';  

      // Here we create our dropdown of possible datasets.  All datasets presented have already been registered with the server.
      // Note that the value here will be the id of this layer as stored in the database on the server.
      var datasetId = registeredDataLayersByTag[parameterIdentifier][i].datasetId;


      var dataset = datasets[datasetId];

      // If we already know the title of this one, insert it now
      if(dataset) 
        title = dataset.title || dataset.identifier;

      if(id) 
        ctrl.append('<option class="dataset-title-' + datasetId + '" value="' + datasetId + '">' + title + '</option>');
    }


    ctrl.change(function() {
      if(datasets[+this.value]) {   // The "+" coerces this.value into a number
        updateHiddenFields(parameterIdentifier, datasets[+this.value]);
      }
    });

    return [ ctrl,
             $('<input>').attr('type','hidden')
                        .attr('name', 'srs['          + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-srs')
                        .val('<%= @current_city.srs %>'),
             $('<input>').attr('type','hidden')
                        .attr('name', 'dformat['      + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-dformat')
                        .val(dataset ? dataset.format : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-left['    + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-left')
                        .val(dataset ? dataset.bbox_left : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-right['   + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-right')
                        .val(dataset ? dataset.bbox_right : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-top['     + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-top')
                        .val(dataset ? dataset.bbox_top : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-bottom['  + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-bottom')
                        .val(dataset ? dataset.bbox_bottom : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'res-x['        + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-res-x')
                        .val(dataset ? dataset.resolution_x : ""),
             $('<input>').attr('type','hidden')
                        .attr('name', 'res-y['        + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-res-y')
                        .val(dataset ? dataset.resolution_y : ""),
           ];                             
  };


  var showIODetails = function(elKey) {
    $("#" + elKey + "-short").hide();
    $("#" + elKey + "-long").show();
  };


  var hideIODetails = function(elKey) {
    $("#" + elKey + "-long").hide();
    $("#" + elKey + "-short").show();
  };


  var anyDatasetsMissing = false;

  // textInputValues & datasetValues will only be defined when calling from the main Module Configuration page
  // When mode is output, datasetValues will be undefined
  // items is a list of input/output requirements the module has
  // isInput will be true for input table, false for output table
  var populateTable = function(items, isInput, textInputValues, datasetValues)
  {
    var itemCount = items.length;
    var modeName = isInput ? 'input' : 'output';

    // Find the exsiting table called input-table or output-table
    var table = $('#' + modeName + '-table');

    if(itemCount == 0) 
    {
      if(isInput) 
        table.html("<span class='no-inputs-ouputs'>This module configuration requires no inputs.</span>");
      else 
        table.html("<span class='no-inputs-ouputs'>This module configuration produces no outputs.</span>");
    }
    else 
    {
      table.empty();

      var text       = isInput ? "Selected Dataset or Value" : "Output Dataset Identifier";
      var extraField = isInput ? "<th class='center'>Parameter Tag</th>"    : "";

      table.append("<tr><th>Parameter Name</th>" + extraField + "<th class='center'>" + text + "</th></tr>");


      for(var i = 0; i < itemCount; i++)
      {
      	//debugger;
      	item = items[i];
  		// Item looks like this:
        // "abstract":"Field of type INTEGER specifying a time delay in miliseconds.",
        // "alive":true,
        // "datatype":"float",
        // "id":123,
        // "identifier":"delay",
        // "is_input":true,
        // "last_seen":"2013-04-08T15:12:04Z",
        // "title":"Time delay in miliseconds.",
        // "wps_process_id":4
      	
      	//Create at least as many input fields as minimum occurrences.
      	for(var n = 0; n < item.min_occurs; n++)
      	{
	        var row = $(document.createElement("tr"));

	        // Parameter Name column
	        var cell = $(document.createElement('td'));
	
	        cell.append(item.title ? item.title : item.identifier);
	        if(item.abstract)
	        {
	          if(item.abstract.length > 50)
	          {
	            var key = modeName + i;
	            cell.append("<br><span class='input-description' id='" + key + "-short'>" + 
	                          item.abstract.substring(0,50) + 
	                          "...&nbsp;&nbsp;<a href='#' onclick='showIODetails(\"" + key + "\");return false;'>" + 
	                            "More&nbsp;&gt;" + 
	                          "</a>" +
	                        "</span>" + 
	                        "<span class='input-description' id='" + key + "-long' style='display:none;'>" + 
	                          item.abstract + 
	                          "&nbsp;&nbsp;<a href='#' onclick='hideIODetails(\"" + key + "\");return false;'>" + 
	                            "&lt;&nbsp;Less" + 
	                          "</a>" +
	                        "</span>");
	          }
	          else
	             cell.append("<br><span class='input-description'>" + item.abstract + "</span>");
	        }
	
	
	        // if(item.abstract != undefined && item.abstract != '') {
	        //   cell.append('<img src="/assets/small_question_mark.gif" class="info-icon" ' +
	        //               'alt="More info" title="' + item.abstract + '">');
	        // }
	
	        row.append(cell);
	
	        if(isInput) {
	          row.append("<td align='center'>[" + item.identifier + "]</td>");
	        }
	
	        // Parameter Value column
	        cell = $(document.createElement('td'));   // Dataset
	        cell.attr("nowrap", true);
	
	        // Complex input
	        if(isInput && item.datatype == 'ComplexData') {      // Dropdown showing existing datasets of proper type
	          var controls = createDatasetSelectionControls(item.identifier, modeName);
	
	          control = controls[0];
	          control.attr('class', 'disableable');
	
	          if(control.children().length == 0) {
	              cell.text('No registered datasets of type "' + item.identifier + '"');
	              cell.append('<img src="/assets/small_question_mark.gif" class="info-icon" ' +
	                  'alt="More info" title="Don\'t panic!  You can register new datasets in the Data Manager when you are done here.">');
	              anyDatasetsMissing = true;
	          }
	          else {
	            control.prepend("<option value=-1>No dataset selected</option>");
	            control.change(onSelectedDatasetChanged);
	            control.attr('class', 'req-select disableable');
	
	            cell.html(control);
	
	            if(datasetValues && datasetValues[item.identifier])
	              control.val(datasetValues[item.identifier]);
	            else 
	              control.val(-1);
	          }
	
	          // Add any other (hidden) controls returned by createDatasetSelectionControls()
	          for(var j = 1, len = controls.length; j < len; j++) 
	            cell.append(controls[j]);
	
	          row.append(cell);
	        }
	
	        // Simple output
	        else if(!isInput && item.datatype != "ComplexData") {    // No input required, just display of value
	        	
	          var value = (textInputValues == undefined) ? "" : textInputValues[item.identifier + modeName];
	
	          if(value) 
	            cell.append('<b>' + value + '</b>');
	          else 
	            cell.append('<i>Will be computed</i>');
	
	          row.append(cell);
	        }
	
	        // Simple input or complex output -- we'll need to show a text field here
	        else 
	        {    
	          var className = isInput ? "input-field" : "output-field";
		      var value = (textInputValues == undefined) ? "" : textInputValues[item.identifier + modeName];
		      var placeholder = isInput ? item.datatype.capitalize() + " value" : "Output dataset name";
		
		      var name = modeName + '[' + item.identifier + '][' + n + ']';
		
		      cell.html('<input type="text" name="' + name + '" placeholder="' + placeholder + '" ' +
		                       'value="' + value + '" class="' + className + ' disableable" onchange="onInputOutputTextEntryChanged(this)">');
		      row.append(cell);
		
		      row.append('<td class="message-cell" name="' + name + '"></td>' );   // Place for messages and such
	        }
	
	        table.append(row);
	
	      }
	      
	      
	   }
    }
  };
  
  
  var addInputLine = function(lastRowId)
  {
  	debugger;
  	var lastRow = document.getElementById(lastRowId);
  	var table = lastRow.parentNode.parentNode;
  	var newRow = lastRow.cloneNode(true);
  	var id = Math.floor(Math.random() * -1000);
  	newRow.id = lastRow.id + id;
  	lastRow.parentNode.insertBefore(newRow, lastRow);
	var input = newRow.cells[2].firstChild;
	input.name = input.name.substring(0, input.name.lastIndexOf("[")) + "[" + id + "]";
	lastRow.cells[2].firstChild.value = "";
	if(newRow.cells.length > 4) newRow.deleteCell(4);
  };
  
  var removeInputLine = function(lastRowId)
  {
  	debugger;
  	var lastRow = document.getElementById(lastRowId);
  	var table = lastRow.parentNode.parentNode;
  	lastRow.cells[2].firstChild.value = lastRow.previousSibling.cells[2].firstChild.value;
  	table.deleteRow(lastRow.previousSibling.rowIndex);
  	onInputOutputTextEntryChanged(lastRow.cells[2].firstChild);
  };
  
  
  // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
  var getRelevantKeys = function(identifier, textInputValues)
  {
  	keys = new Array();
  	if (textInputValues == null) return values;
  	
  	for (var key in textInputValues)	
  	{
		if (key.substring(key.indexOf(":")).indexOf(identifier) == 1)
			keys.push(key);
	}
  	
  	return keys;
  };
  
  // There is some redundancy between this method and populateTable.
  // This must be solved later on
  var populateTableInputs = function(items, textInputValues)
  {
    var itemCount = items.length;
    var modeName = 'input'

    // Find the exsiting table called input-table or output-table
    var table = $('#' + modeName + '-table');

    if(itemCount == 0) 
        table.html("<span class='no-inputs-ouputs'>This module configuration requires no inputs.</span>");

    else 
    {
      table.empty();

      var text       = "Selected Dataset or Value";
      var extraField = "<th class='center'>Parameter Tag</th>";
      var lastRowName = "";

      table.append("<tr><th>Parameter Name</th>" + extraField + "<th class='center'>" + text + "</th></tr>");


      for(var i = 0; i < itemCount; i++)
      {
      	item = items[i];
      	
      	//Create at least as many input fields as minimum occurrences.
      	keys = getRelevantKeys(item.identifier, textInputValues);
      	valueCount = keys.length;
      	if (valueCount < item.min_occurs) valueCount = item.min_occurs;
      	
      	for(var n = 0; n < valueCount; n++)
      	{
	        var row = $(document.createElement("tr"));
	        row.id = item.identifier + n;
	        
	        row.attr('id', item.identifier + n);

	        // Parameter Name column
	        var cell = $(document.createElement('td'));
	
	        cell.append(item.title ? item.title : item.identifier);
	        if(item.abstract)
	        {
	          if(item.abstract.length > 50)
	          {
	            var key = modeName + i;
	            cell.append("<br><span class='input-description' id='" + key + "-short'>" + 
	                          item.abstract.substring(0,50) + 
	                          "...&nbsp;&nbsp;<a href='#' onclick='showIODetails(\"" + key + "\");return false;'>" + 
	                            "More&nbsp;&gt;" + 
	                          "</a>" +
	                        "</span>" + 
	                        "<span class='input-description' id='" + key + "-long' style='display:none;'>" + 
	                          item.abstract + 
	                          "&nbsp;&nbsp;<a href='#' onclick='hideIODetails(\"" + key + "\");return false;'>" + 
	                            "&lt;&nbsp;Less" + 
	                          "</a>" +
	                        "</span>");
	          }
	          else
	             cell.append("<br><span class='input-description'>" + item.abstract + "</span>");
	        }
	
	        row.append(cell);
	        row.append("<td align='center'>[" + item.identifier + "]</td>");
	
	        // Parameter Value column
	        cell = $(document.createElement('td'));   // Dataset
	        cell.attr("nowrap", true);
	
	        // Create text inputs	
            var className = "input-field";
            
            value = "";
            item_id = "";
            if((textInputValues != null) && (keys.length > n))
            {
            	value = textInputValues[keys[n]];
            	item_id = keys[n].substring(0, keys[n].indexOf(":"));
            }
            
            //var value = (textInputValues == undefined) ? "" : textInputValues[n];
    
            var placeholder = item.datatype.capitalize() + " value";

            var name = modeName + '[' + item.identifier + '][' + item_id + ']';

            cell.html('<input type="text" name="' + name + '" placeholder="' + placeholder + '" ' +
                           'value="' + value + '" class="' + className + ' disableable" onchange="onInputOutputTextEntryChanged(this)">');
            row.append(cell);
            row.append('<td class="message-cell" name="' + name + '"></td>' );   // Place for messages and such

	        table.append(row);
	        lastRow = row;
	      }
	   }
	   
	   if(item.max_occurs > 1)
	   {
		   cell = $(document.createElement('td'));
		   cell.html(
		   	"<a href=# onclick='addInputLine(\"" + lastRow.id + "\");'>Add [" + item.identifier + "] input</a><br>" + 
		   	"<a href=# onclick='removeInputLine(\"" + lastRow.id + "\");'>Remove [" + item.identifier + "] input</a>"
		   	);
		   cell.css('background-color', '#aaa !important');
		   row.append(cell);
	   }

    }
  };



  var nameVerified = function(jqXHR)
  {
    // var response = jqXHR.responseText;
    var field  = jqXHR.data[0].fieldname;
    var status = jqXHR.data[0].status;        // Should be "ok" or "not ok"

    // Fix up field to "legalize" the fieldname that rails uses
    field.replace("[", "\\[");
    field.replace("]", "\\]");

    var msg = "";
    if(status == 'not ok')
      msg = "Warning: Already have registered dataset with this name!";

    // Add or remove error class depnding on status sent by the server
    $('input[name="' + field + '"]').toggleClass("error-nameAlreadyRegistered", status == 'not ok');
    $('td[name="' + field + '"]').text(msg);
  }


  // Check if we already have a dataset with this name
  var checkIfNameIsAvailable = function(field)
  {
    // Only worry about output values
    if(field.name.substring(0,6) != "output") 
      return;

    var name = field.value;

    var serverUrl = '<%= url_for(:controller => "datasets", :action => "check_name", :format => :json) %>';
    $.ajax({
        type: 'GET',
        url: serverUrl,
        data: 'name=' + field.value + '&field_name=' + field.name,
        headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
        success: nameVerified,
        error: function(jqXHR, textStatus, error) { alert("Error checking name availability: " + error); }
      });
  }

 </script>
