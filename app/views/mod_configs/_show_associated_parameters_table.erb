<script type="text/javascript">

  // Create a structure of registered datasets organized by identifier -- this will make retrieval below much more efficient
  var registeredDataLayersByIdentifier = {};    // Indexed by identifier string
  var registeredDataLayersById = {};            // Indexed by datasetId

  <%= @datasets.reject{ |d| d.finalized == false }
               .map{ |d| d.dataset_type }
               .uniq
               .map{ |d| "registeredDataLayersByIdentifier['" + d + "'] = [];\n" }
               .join(' ') %>
                         
  <%= @datasets.reject{ |d| d.finalized == false }.
                map{ |d| "registeredDataLayersByIdentifier['" + d.dataset_type + "'].push({" +
                            "identifier:'" + d.identifier + "'," +
                            "datasetId:"   + d.id.to_s() + "," +
                            "serverUrl:'"  + d.server_url.gsub('\\') { '\\\\' } + "'" +
                          "});\n" +
                          "registeredDataLayersById[" + d.id.to_s() + "] = " +
                                "registeredDataLayersByIdentifier['" + d.dataset_type + "'][registeredDataLayersByIdentifier['" + d.dataset_type + "'].length - 1];\n"
                    }.
                join(' ') %>


  // mode will be "input" or "output"
  // We may get here before discoveredLayers is populated.  In which case, we'll assign a class id, and update the entry
  // as further items arrive.  In other contexts, discoveredLayers may already be fully populated.
  var createDatasetSelectionControls = function(parameterIdentifier, mode)
  {
    var ctrl = $(document.createElement('select'))
            .attr('name', 'datasets[' + parameterIdentifier + ']')
            .attr('id', parameterIdentifier + mode);

    for(var i = 0, len = registeredDataLayersByIdentifier[parameterIdentifier].length; i < len; i++) {
      var title = "Unknown Title";  

      // Here we create our dropdown of possible datasets.  All datasets presented have already been registered with the server.
      // Note that the value here will be the id of this layer as stored in the database on the server.
      var serverUrl         = registeredDataLayersByIdentifier[parameterIdentifier][i].serverUrl;
      var datasetIdentifier = registeredDataLayersByIdentifier[parameterIdentifier][i].identifier;
      var datasetId         = registeredDatasets[serverUrl][datasetIdentifier];


      // If we already know the title of this one, insert it now
      if(discoveredLayers[serverUrl + datasetIdentifier]) {
        title = discoveredLayers[serverUrl + datasetIdentifier].title;
      } 

      if(id) {
        ctrl.append('<option class="dataset-title-' + datasetId + '" value="' + datasetId + '">' + title + '</option>');
      }
    }

    ctrl.change(function() {
      if(registeredDataLayersById[+this.value]) {
        var url = registeredDataLayersById[+this.value].serverUrl;
        var id  = registeredDataLayersById[+this.value].identifier;
        var dataset = discoveredLayers[url + id];

        $('#hidden-field-' + parameterIdentifier + '-srs').val(dataset.srs);
        $('#hidden-field-' + parameterIdentifier + '-dformat').val(dataset.format);
        $('#hidden-field-' + parameterIdentifier + '-bbox-left').val(dataset.bbox.left);
        $('#hidden-field-' + parameterIdentifier + '-bbox-right').val(dataset.bbox.right);
        $('#hidden-field-' + parameterIdentifier + '-bbox-top').val(dataset.bbox.top);
        $('#hidden-field-' + parameterIdentifier + '-bbox-bottom').val(dataset.bbox.bottom);
        $('#hidden-field-' + parameterIdentifier + '-res-x').val(dataset.resolution.x);
        $('#hidden-field-' + parameterIdentifier + '-res-y').val(dataset.resolution.y);
      }
    });

    return [ ctrl,
             $('<input>').attr('type','hidden')
                        .attr('name', 'srs[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-srs'),

             $('<input>').attr('type','hidden')
                        .attr('name', 'dformat[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-dformat'),

             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-left[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-left'),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-right[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-right'),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-top[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-top'),
             $('<input>').attr('type','hidden')
                        .attr('name', 'bbox-bottom[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-bbox-bottom'),


             $('<input>').attr('type','hidden')
                        .attr('name', 'res-x[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-res-x'),
             $('<input>').attr('type','hidden')
                        .attr('name', 'res-y[' + parameterIdentifier + ']')
                        .attr('id',   'hidden-field-' + parameterIdentifier + '-res-y')
           ];                             


    return [ctrl, srsField];
  };


  var anyDatasetsMissing = false;

  <%# Creates fn called populateInputTable or populateOutputTable %>
  // formValues & datasetValues will only be defined when calling from the main Module Configuration page
  // When mode is output, datasetValues will be undefined
  // items is a list of input/output requirements the module has
  function populate<%= mode.slice(0,1).capitalize + mode.slice(1..-1) %>Table(items, formValues, datasetValues)
  {
    var itemCount = items.length;

    var table = $('#<%= mode %>-table');    // Find the exsiting table called input-table or output-table

    if(itemCount == 0) {
      if('<%= mode %>' == 'input') {
        table.html("<span class='no-inputs-ouputs'>This module configuration requires no inputs.</span>");
      }
      else {
        table.html("<span class='no-inputs-ouputs'>This module configuration produces no outputs.</span>");
      }
    }
    else {

      table.empty();

      var headerRow = '<tr><th>Parameter Name</th>' +
                      '<% if mode == :input %><th>Selected Dataset or Value</th><% else %><th>Output Dataset Identifier</th><% end %></tr>';

      table.append(headerRow);


      for(var i = 0; i < itemCount; i++)
      {
        var row  = $(document.createElement('tr'));
        var cell = $(document.createElement('td'));   // Param name

        item = items[i];

        cell.html(item.title);

        if(item.descr != null) {
          cell.append('<img src="/assets/small_question_mark.gif" class="info-icon" ' +
                  'alt="More info" title="' + item.descr + '">');
        }

        row.append(cell);

        cell = $(document.createElement('td'));   // Dataset
        cell.attr("nowrap", true);


        if('<%= mode %>' == 'input' && items[i].type == "complex") {      // Dropdown showing existing datasets of proper type
          var controls = createDatasetSelectionControls(item.identifier, '<%= mode %>');

          control = controls[0];
          control.attr('class', 'disablable');

          if(control.children().length == 0) {
              cell.text('No registered datasets of type "' + item.identifier + '"');
              cell.append('<img src="/assets/small_question_mark.gif" class="info-icon" ' +
                  'alt="More info" title="Don\'t panic!  You can register new datasets in the Data Manager when you are done here.">');
              anyDatasetsMissing = true;
          }
          else {
            control.prepend("<option value=-1>No dataset selected</option>");
            control.change(onSelectedDatasetChanged);
            control.attr('class', 'req-select disablable');

            cell.html(control);

            if(datasetValues && datasetValues[item.identifier])
              control.val(datasetValues[item.identifier]);
            else 
              control.val(-1);
          }

          // Add any other (hidden) controls returned by createDatasetSelectionControls()
          for(var j = 1, len = controls.length; j < len; j++) {
            cell.append(controls[j]);
          }
        }
        else if('<%= mode %>' == 'output' && items[i].type != "complex") {    // No input required, just display of value

          var value = (formValues == undefined) ? "" : formValues[item.identifier + '<%= mode %>'];

          // cell.html('<input type="hidden" name="<%= mode %>[' + item.identifier + ']" value ="">');    // Make sure something gets put in the database for this field

          if(value == undefined || value == "") {
            cell.append('<i>Will be computed</i>');
          } else {
            cell.append('<b>' + value + '</b>');
          }
        }
        else {    // Data is a simple type like integer or string -- use a textfield
          var value = (formValues == undefined) ? "" : formValues[item.identifier + '<%= mode %>'];
          var placeholder = ('<%= mode %>' == 'output') ? "Output dataset name" : items[i].type.capitalize() + " value";

          cell.html('<input type="text" name="<%= mode %>[' + item.identifier + ']" placeholder="' + placeholder + '" ' +
                           'value="' + value + '" class="req-textentry disablable" onchange="onInputOutputTextEntryChanged()">');
        }

        row.append(cell);
        table.append(row);
      }
    }
  }

 </script>

<!-- Our HTML -->
<!-- Print a table of parameters for the module specified in mod -->

<!--<% newConfig = newConfig || false %>  <%# True if we're creating a new configuration, false if editing an existing one %>-->

<label class="simple_form label"><%= mode.slice(0,1).capitalize + mode.slice(1..-1) %>s</label>
<table class="zebra" id="<%= mode %>-table">
  <!-- Will be populated below -->
</table>
