<p id="notice"><%= notice %></p>

<h1 class="page_header">
  Module Configuration
</h1>

<%# Include some code we share with the other input page in mod_configs %>
<%= render :partial => 'shared_code.html.erb' %>


<script type="text/javascript">

  // // We only care about WFS here, as these are all that can be used with process configurations
  // // Uses functions in build_data_layers partial
  // getWmsLayers(registeredDataServers);

  function hideButtons() {
    $('#run_module_button_container').hide();
    $('#stop_module_button_container').hide();
  }

  function enableEditing() {
    $('.disablable').prop('disabled',false);
    $('.hideable').show();
  }

  function disableEditing() {
    $('.disablable').prop('disabled',true);
    $('.hideable').hide();
  }


  function showRunButton(text) {
    $('#run-module-button').attr('value', text);
    $('#run_module_button_container').show();
  }


  // See https://github.com/jeremyw/jquery-smart-poll
  // function startPolling() {
  //   $.poll(function(retry) {
  //     $.get('get_config_status/<%= @mod_config.id %>', function(response, status) {
  //       if(response != 3)
  //         updateScreen(response);
  //       else
  //         retry();
  //     })
  //   })
  // }


  // When we load the page, we need to get a process description from the hosting WPS server.  Here we handle the server's response.
  var onDescribedProcess = function(process) {

    $('#based-on').html((process.title || process.name) + ' template');   // "Based on..."
    $('#mod-descr').html(process.abstract);                               // "Details..."

    var serverUrl = process.wps.executeUrlGet;

    var inputs  = fillContainer(process.inputs);
    var outputs = fillContainer(process.outputs);

    <%# Dictionary of values for each input on this form %>
    <% formValues = @text_inputs.map{|text| text.column_name + (text.is_input ? 'input' : 'output') + ': "' + text.value + '"'}.join(',') %>
    var formValues    = { <%= raw formValues %> };

    <%# Dictionary of selected datasets used for selecting items in selected dataset dropdowns %>
    <% datasetValues = @dataset_inputs.map{|d| d.dataset.dataset_type + ': "' + d.dataset.id.to_s + '"'}.join(',') %>
    var datasetValues = { <%= raw datasetValues %> };

    populateInputTable (inputs, formValues, datasetValues);
    populateOutputTable(outputs, formValues);

    updateScreen('<%= @mod_config.status %>', '<%= escape_javascript @mod_config.status_text %>'); 
  }

  // Initiate the request to the WPS server for info about the process that this modConfig is based on
  WPS.describeProcess("<%= @mod_config.wps_server.url %>", "<%= @mod_config.identifier %>", onDescribedProcess);


  function doneProcessing(url, type, serverDetails, status)  // status will be OK or ERROR
  {
      // Do nothing
  }

  <%= render :partial => '/shared/include_get_pretty_name_function.html.erb' %>


  function checkDataStatus() {

    stat = 'READY';

    if(anyDatasetsMissing) {
      stat = 'NEEDS_DATA';
    }


    $('#input-output-form').find(':input').each( function() {
      if($(this).is('select')) {
        if($(this).val() == -1) { 
          stat = 'NEEDS_DATA';   // Found a missing dataset, so update the status to NEEDS_DATA and quit
        }
      }
    });

    $('#input-output-form').find(':input').each( function() {
      if($(this).is('input')) {
        if($(this).val() == "") { 
          stat = 'NEEDS_DATA';   // Found a missing dataset, so update the status to NEEDS_DATA and quit
        }
      }
    });

    return stat;
  }


  function updateScreen(statusCode, message) {
      hideButtons();

      $('#status_display').text(getPrettyStatusName(statusCode));

      if(statusCode == 'NEEDS_DATA') {    // Module just created, needs data
        $('#explanation').html("Before you can run this module, you need to supply data or values for each of the inputs. " +
                               "You can do this by selecting a dataset from the list provided for each parameter, or by creating new datasets.");
        enableEditing();

      } else if(statusCode == 'READY') {    // Module ready to go... maybe
        // The thing is, we still don't really know if we're ready, as the server has no knowledge of exactly what params we need.
        // The server _thinks_ we've got everything, but only we know for sure.  So let's make sure all inputs are in fact specified.

        $('#explanation').html("This module has all its data and is ready to run.  Click the Run button to start the process.");
        enableEditing();
        showRunButton('Run Module >>>');

      } else if(statusCode == 'RUNNING') {    // Module is running
        $('#stop_module_button_container').show();
        $('#explanation').html("This module is currently running.  You can refresh this page, " +
                               "or check back later to monitor the module's progress, " +
                               "but you cannot change dataset information while the module is running.");

          if(message != '') {
            $('#status_display').append('<br>' + message);
          }
        
          disableEditing();
          startPolling();

      } else if(statusCode == 'FINISHED') {   // Module run compete
        $('#explanation').html("This module has been successfully run.  You can now view the outputs in the Data Manager.");
        enableEditing();

        showRunButton('Run Module Again >>>');

      } else if(statusCode == 'ERROR') {    // Module run ended in error
        $('#explanation').html("We experienced an error running this configuration.  The WPS server replied:<br>" +
                               "<code><%= escape_javascript @mod_config.status_text %></code>");
        enableEditing();
        showRunButton('Try Running Module Again >>>');
      }

      $("body").css("cursor", "auto");
    }

    // User has updated an input or output entry slot (called via onChange event)
    var onInputOutputTextEntryChanged = function() {
      var status = checkDataStatus();
      $('#hidden_status_tag').val(status);

      $('#input-output-form').submit();
    }


  getWmsLayers(registeredDataServers);
  getWfsLayers(registeredDataServers);


    // Gets triggered when a selected dataset changes
    function onSelectedDatasetChanged() {

      var status = checkDataStatus();
      $('#hidden_status_tag').val(status);
      $('#input-output-form').submit();
    }


</script>

<div class="explanation" id="explanation">
  This is the primary module control panel.  You can modify or run the module.
</div>

<div class="module-status-box">
  MODULE STATUS: <span id="status_display"><img src="/assets/loading_spinner.gif" width=16 height=11> Checking...</span>
</div>

<div class="simple_form">
  <label>Name</label>
  <%= best_in_place @mod_config, :name, :type => :input, :activator => "#click_to_edit_name" %>
  <span class="click_to_edit" id="click_to_edit_name">[Click to edit]</span>
</div>


<div class="simple_form">
  <label>Based on</label>
  <span id="based-on">Retrieving name...</span>
</div>

<div class="simple_form">
  <label>Details</label>
  <span id="mod-descr">Retrieving description...</span>
</div>


<div class="simple_form">
  <label>Note</label>
  <%= best_in_place @mod_config, :descr, :type => :textarea, :activator => "#click_to_edit_notes" %>
  <span class="click_to_edit" id="click_to_edit_notes">[Click to edit]</span>
</div>


<div class="simple_form">
  <%= form_for @mod_config, :url => {:action => 'update'}, :html=> {:id=>'input-output-form', 'data-type' => 'json'}, :remote=>true do |f| %>
    <%= render :partial => "show_associated_parameters_table",
               :locals  => { :mode => :input, :config => @mod_config, :newConfig => false  } %>

    <%= render :partial => "show_associated_parameters_table",
               :locals  => { :mode => :output, :config => @mod_config, :newConfig => false  } %>

    <input name="mod_config[status]" type="hidden" value="NEEDS_DATA" id="hidden_status_tag" />
  <% end %>

</div>

<br>


<!-- Show special buttons depending on status  -->
<div class="simple_form">

  <label></label>
  <%# method => get causes button to act like a normal link, rather than a form post %>
  <%= link_to 'View Module List', mod_configs_path, :class => 'linkbutton' %>

  <span id="run_module_button_container" style="display:none">
    <%= button_to 'Run Module >>>', { :action => 'run', :controller => 'mod_configs', :id => @mod_config }, 
                                   :remote => true, :class => 'linkbutton', :id => 'run-module-button', 
                                   # :confirm =>'Are you sure?',
                                   form: { :id => "run-module-form", 'data-type' => 'json' }  %>
  </span>


  <span id="stop_module_button_container" style="display:none">
    <%= button_to 'Stop Running >>>', { :action => 'stop_running', :controller => 'mod_configs', :id => @mod_config }, 
                               :remote => true, :class => 'linkbutton', :id => 'stop-module-button', 
                               :confirm =>'Are you sure you want to stop running the module??',
                               form: { :id => "stop-module-form", 'data-type' => 'json' }  %>
  </span>



  <script type="text/javascript">
    // User clicked the Run button


    $('#run-module-form').bind('ajax:before', function(xhr, data, status) { 
      showRunButton('Working...');
    });


    $('#run-module-form').bind('ajax:success', function(xhr, data, status) { 
      updateScreen(data.status, data.status_text); 
    });


    $('#stop-module-form').bind('ajax:success', function(xhr, data, status) { 
      updateScreen(data.status, data.status_text); 
    });

    // An input/output text field has been updated; data contains a ModConfig object
    $('#input-output-form').bind('ajax:success', function(xhr, data, status) {
      updateScreen(data.status, data.status_text); 
    });

    $('#input-output-form').bind('ajax:error', function(evnt, jqXHR, ajaxSettings, thrownError) { 
      alert("There was an error.  Please see the console log for information.");
      console.log(arguments); 
   });

    // Response handler for best_in_class fields (Name and Note)
    $('.best_in_place').best_in_place().bind('ajax:success', function(xhr, data, status) { 
      updateScreen(JSON.parse(data).status, JSON.parse(data).status_text); 
    });
  </script>

</div>


<!-- Special links off ot the lower right -->
<div id="status" style="float: right; margin-top: -30px;">
  <%= link_to 'Delete This Module', @mod_config,
     confirm: "Deleting this module is a permanent action.\n\n" + 
              "Click OK if you are sure you want to delete this module.", method: :delete %>
</div>

<br><br>

