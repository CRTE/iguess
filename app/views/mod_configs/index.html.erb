<h1 class="page_header">Modules</h1>
<div class="page_subheader"></div>


<div class="explanation">
  <ul style="list-style-type: square;">
  <li>Users can create Modules from a Module Template by specifying all inputs and outputs that template requires.</li>
  <li>A list of Module Templates can be found in the Module Catalog.</li>
  </ul>
</div>


<ul class="tabs">
  <li><a class="l" id="t1" href="#configured_modules_tab">Configured Modules</a></li>
  <li><a class="l" id="t2" href="#module_catalog_tab">Module Catalog</a></li>
</ul>

<script type="text/javascript">
  processIdLookup = { };
  var o;
  <%
    ctr = 0;
    lines = "";                   # These will be a JS representation of thing
    processIdLookup = Hash.new    # A Ruby representation of the same

    @mod_configs.map { |c|
      id = c.identifier.blank? ? "" : c.identifier;

      # The following produces a line that looks like this:
      # o = new Object;o.classId = 'x1';o.serverUrl = 'http://iguess.tudor.lu/cgi-bin/pywps.cgi';   \
      # o.identifier = 'solar_potential';processIdLookup['solar_potential'] = o;
      lines += "o = new Object;" +
               "o.classId = 'x" + ctr.to_s + "';" +
               "o.serverUrl = '" + c.wps_server.url + "';" +
               "o.identifier = '"  + id + "';" +
               "o.found = false; " +

               "o.deleteUrl = '" + link_to('Delete This Module', c, confirm: "Deleting this module is a permanent action.\\n\\n" +
                                                                             "Click OK if you are sure you want to delete this module.",
                                                                    method: :delete) + "';" +
               "processIdLookup['" + c.wps_server.url + id + "'] = o;\n";

      processIdLookup[c.wps_server.url + id] = 'x' + ctr.to_s;
      ctr += 1;
    }
  %>

  <%= raw lines %>


  var urls = [<%= @wps_servers.map{ |w| "'" + w.url + "'" }.join(',') %>];
  var responses = 0;

  // For each WPS url in our database, start probing the server
  // We need the results of onReceivedServerInfo to complete the Configured Modules tab
  // We need the results of onDescribedProcess to complete the Module Catalog tab
  for(var i = 0; i < urls.length; i++) {  WPS.probeWPS(urls[i], onReceivedServerInfo, onDescribedProcess);  }

  // This will be called when the GetCapabilities call to the WPS returns.  Should happen once per WPS server.
  function onReceivedServerInfo(url, title, abstract, processes)
  {
    var titleKey = makeKey(url, 'title');
    var abstractKey = makeKey(url, 'abstract');

    $('.' + titleKey).text(title);          // This is the title of the server at the top of the Module Catalog
    $('#' + abstractKey).text(abstract);

    // Now see if there are any servers we were expecting, but are no longer listed on the server
    var len = processes.length;

    // Populate the "Based on" and status columns of the Configured Modules tab
    for(var i = 0; i < len; i++) {
      var wrappedServer = processes[i].wps.getCapabilitiesUrlGet;
      var server = WPS.unwrapProcServer(wrappedServer, processes[i].identifier);
      var obj = processIdLookup[server + processes[i].identifier];

      if(obj != undefined) {
        $("." + obj.classId).html(processes[i].title || processes[i].identifier);
        $(".status-" + obj.classId).html("Server available");
        obj.found = true;
      }
    }

    // Now check if we have any configurations based on modules that are not on the WPS server that we expect
    for(var key in processIdLookup) {
      if(processIdLookup[key].serverUrl == server) {
        if(!processIdLookup[key].found) {
          var classId = processIdLookup[key].classId;
          $('.' + classId).html('Process not found on server -- It is either temporarily offline or it has been deleted ' + processIdLookup[key].deleteUrl);

          $('.status-' + classId).html('Server available');
        }
      }
    }
  }

  // This function is called when the describeProcesses response arrives
  // It will be called repeatedly as responses arrive
  function onDescribedProcess(process, serverName)
  {
    responses++;

    // We know how many WPS describeProcess calls we made, so whenever one returns we should know if we are still
    // waiting for any others
    if(responses == WPS.getResponsesExpected()) {
      $('#wps-probing-indicator').hide();           // On the Module Catalog tab
    }

    var description = '<hr><h3 class="process-title">' + process.title + '</h3>' +
        '<div class="process-descr">' + process.abstract + '</div>' +
        '<div class="process-server-name"><span class="hosted-by">Hosted by:</span> <span class="server-name">' + serverName + '</span></div>' +

        '<table class="model-descr-table">' +
        '<tbody class="inputs">';
    if(process.inputs.length == 0) {
      description += '<tr><th colspan=3 class="group-header "><div class="outdent">No Inputs</div></th></tr>';
    } else {
      description += '<tr><th colspan=3 class="group-header" scope=rowgroup><div class="outdent">Model Inputs</div></th></tr>' +
                     '<tr><th>Parameter Name</th><th>Description</th></tr>';

      for(var i = 0; i < process.inputs.length; i++) {
        description += getDescrRow(process.inputs[i]);
      }
    }

    description += '</tbody><tbody class="outputs">';
    if(process.outputs.length == 0) {
      description += '<tr><th colspan=3 class="group-header"><div class="outdent">No Outputs</div></th></tr>';
    } else {
      description += '<tr><th colspan=3 class="group-header" scope=rowgroup><div class="outdent">Model Outputs</div></th></tr>' +
                     '<tr><th>Name</th><th>Description</th></tr>';

      for(var i = 0; i < process.outputs.length; i++) {
        description += getDescrRow(process.outputs[i]);
      }
    }

    description += '</tbody></table><a href="/mod_configs/new?template=' + (process.title + 'Q' + process.wps.getCapabilitiesUrlGet).makeHash() + '">Create new configuration for this service</a>';

    document.getElementById("wps-result").innerHTML += description;
  };


  // Formatting helper
  function getDescrRow(record)
  {
    var title    = record.title    ? record.title + ' [' + record.identifier + ']' : record.identifier;
    var abstract = record.abstract ? record.abstract : "<div class='center'>-</div>";

    return '<tr><td class="param-name">'  + title    + '</td>' +
               '<td class="param-descr">' + abstract + '</td></tr>';
  }

</script>



<div id="tab-panes" class="tab-pane-container">
  <div id="configured_modules_tab">
    <% if @mod_configs.empty? %>
      No modules have been configured yet.  <%= link_to 'Click here to create one.', new_mod_config_path %>
    <% else %>

    <div class="page_subheader">Modules that have been configured</div>

      <%= render :partial => '/shared/sortable_table_code.html.erb',
                 :locals => { :initialSortlist => "[[0,0]], headers: { 3: {sorter: false}}" } %>

      <table id="sortable_table" class="zebra sortable">
        <thead><tr><th>Name</th><th>Based on</th><th>Status</th><th>Notes</th></tr></thead>

        <tbody>
          <% @mod_configs.each do |mod_config| %>
            <tr>
              <% pid = processIdLookup[mod_config.wps_server.url + (mod_config.identifier.blank? ? "" : mod_config.identifier)] %>

              <td style="white-space: nowrap;"><%= link_to mod_config.name, mod_config %></td>
              <td class='<%= pid =%>'
                  style="white-space: nowrap;">Probing server... <img src="assets/loading_spinner.gif"></td>
              <td class='status-<%= pid =%>'
                  style="white-space: nowrap;">Probing server... <img src="assets/loading_spinner.gif"></td>
              <td><%= mod_config.descr %></td>
            </tr>
          <% end %>
        </tbody>
      </table>

      <br />

      <%= link_to 'New Module Configuration', new_mod_config_path %>
    <% end %>
  </div>

  <div id="module_catalog_tab">
    <div>
      Catalog of modules found on the following servers:
      <ul id="server-list"></ul>
      <a href="#">Add new server</a>
    </div>

    <div id="wps-probing-indicator">Probing servers... <img src="assets/loading_spinner.gif"></div>
    <div id="wps-result"></div>

    <%#= render :partial => '/mods/mods_catalog', :locals => { :all_mods => @mods } %>
  </div>
</div>

<%# Dynamically generate placeholders for the list of servers; these will be populated after we hear from our servers %>
<script type="text/javascript">
    <% @wps_servers.each do |s| %>
    var li = $(document.createElement('li'));

    var liHtml = '<div class="wps-title '       + makeKey('<%= s.url %>', 'title')    + '"></div>' +
                 '<div class="wps-descr" id ="' + makeKey('<%= s.url %>', 'abstract') + '"></div>';

    li.html(liHtml);

    $('#server-list').append(li);
  <% end %>
</script>

