<h1>Register WPS Server</h1>

<div id="error-list" class="explanation-problem" style="display: none"></div>

<div class="explanation">
  <p>blah blah  http://wps.iguess.tudor.lu/cgi-bin/pywps.cgi </p>
</div>

<div class="url-form">
  <table class="url-form">
    <tr>
      <td>
        <input id="server_url" type="text" name="format" value="" placeholder="Enter WPS server URL"/>
        <button type="button" id="load_services">Load</button>
      </td>
    </tr>
  </table>
</div>

<div class="services-display">

  <div class="progress-container">
    <span class="probing" id="probing-wps">Probing WPS server...<span class="loading_indicator"></span></span>
  </div>

  <div class="server-info">
    <div class="server-name"  id="server-name"></div>
    <div class="server-descr" id="server-descr"></div>
    <div class="server-owner" id="server-owner"></div>

    <div id="results-display"><!-- Search results will be shown here --></div>
  </div>
</div>


<script>
  $(document).ready(function(){
    onLoadServicesPageReady();
  });

  var showProbingIndicators = function() {
    $(".progress-container").show();
  };


  var hideProbingIndicators = function() {
    $(".progress-container").hide();
  };

  var resetServiceLoadedStatus = function() {
    // Nothing to do
  };


  //  declaration -- maintain same public interface as ServiceProbe on mass_import page
  var ServiceProbe = function(serverUrl) 
  {   
    this.serverUrl = serverUrl;
    this.serverInfo = {};

    var self = this;    // Stored pointer to ourselves, will be needed in the callback

    // :::public:::
    this.startProbing = function() {
      this.serverInfo = {};   // Clear any previous results
      WPS.getCapabilities(self.serverUrl, self.onWpsGetCapabilitiesSucceeded);
      WPS.describeProcess(self.serverUrl, self.onWpsDescribeProcessSucceeded);

      CurrentServerUrl = self.serverUrl;    // For external access... can we do this a better way?
      getRegisteredProcessesForServer(self.serverUrl);
    };

    // :::private:::
    this.onWpsGetCapabilitiesSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WPS", response, capabilities)) {
        self.serverInfo = extractServerInfoVals(capabilities);

        doneProcessing("WPS");
      }
      else    // Error:
        doneProcessing("WPS");
    };

    this.onWpsDescribeProcessSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WPS", response, capabilities)) {
        self.serverInfo.wps_processes = capabilities.processDescriptions;
        doneProcessing("WPS");
      }
      else    // Error:
        doneProcessing("WPS");
    };
  };


  // Wrap all these assignments in try/catch to ensure no crashes if values are missing
  var extractServerInfoVals = function(capabilities)
  {
    var serverInfo = {};

    try {
      serverInfo.title = capabilities.serviceIdentification.title;
    } catch(error) {
      serverInfo.title = null;
    }

    try {
      serverInfo.abstract = capabilities.serviceIdentification["abstract"];
    } catch(error) {
      serverInfo.abstract = null;
    }

    try {
      serverInfo.provider_name = capabilities.serviceProvider.providerName;
    } catch(error) {
      serverInfo.provider_name = null;
    }

    try {
      serverInfo.contact_email = capabilities.serviceProvider.serviceContact.contactInfo.address.electronicMailAddress;
    } catch(error) {
      serverInfo.contact_email = null;
    }

    try {
      serverInfo.contact_name = capabilities.serviceProvider.serviceContact.individualName;
    } catch(error) {
      serverInfo.contact_name = null;
    }

    return serverInfo;
  };



  var wpsProcessingComplete = 0;  
  

  var resetServiceLoadedStatus = function() {
    wpsProcessingComplete = 0;
  };


  // Called when we've gotten whatever response we're going to get from the server in question
  // i.e. when a WFS response arrives.  More responses might be coming (from WMS, and WCS, for example).
  // If an error has ocurred, serverInfo will be null
  var doneProcessing = function(type) 
  {
    wpsProcessingComplete++;

    // Make sure we've heard from all requests before continuing -- we expect two calls here from
    // the WPS probe, and one more from the request for registered processes from iguess
    if(wpsProcessingComplete < 3)  
      return; 

    $(".progress-container").hide();


    if(CurrentProbe.serverInfo)
    {
      displayServerDetails(CurrentProbe.serverInfo, type);   // Display this as it comes in
      displayServices(CurrentProbe.serverInfo);
    }
    else
      noResponse();
  };


  var noResponse = function() {
    $("#results-display").html(
        '<div class="error-header">Please check the number and dial again</div>' +
        '<div class="error-body">No services could be found on the specified server.<br>' +
        'Either the URL is not that of a WPS process server, or the server is not responding.' +
    '</div>');
    $(".server-info").show();
  };


  var displayServices = function(serverInfo) 
  {
    var html = "";

    for(var key in serverInfo.processes) {
      var proc = serverInfo.processes[key];
      html += "<div>Proc: " + proc.title + " -- " + proc["abstract"] + "</div>";
    }

    html += "<div id='module-catalog'></div>";

    $("#results-display").append(html);


    for(var key in serverInfo.wps_processes) { 
      var proc = serverInfo.wps_processes[key];

      // No identifier, no service!
      if(!proc.identifier)
        continue;

      var registered = RegisteredProcessList.hasObject(proc.identifier);
      $("#module-catalog").append(getProcessHtml(proc, registered));
      console.log(getProcessHtml(proc, registered));
    }

    $(".server-info").show();

    // Convert all our checkboxes into fancy switchboxes!
    addSwitchboxHandler();      

    // Activate the register/unregister controls  -- has to be added after SwitchboxHandler
    addRegisterClickHandler();  

    initializeAccordion('#module-catalog > h2', '.catalog-item');
  };


  var RegisteredProcessList = null;

  var gotRegisteredProcessList = function(url, processList)
  {
    // Make sure this request is for the current URL of interest
    if(url != CurrentServerUrl)
      return;

    RegisteredProcessList = processList;

    // Call doneProcessing in case we're the last request to arrive
    doneProcessing("WPS");
  };


  // Makes ajax request to iGUESS server to see which processes we've already registered from specified URL
  var getRegisteredProcessesForServer = function(url)
  {
    RegisteredProcessList = null;

    $.ajax({
      type: "GET",
      url:  "<%= url_for(:controller=>:wps_processes, :action=>:process_query, :format=>:json) %>",
      data: "server_url=" + url,
      headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
      success: function(data, status, jqXHR)  { 
          gotRegisteredProcessList(url, data.processes);
        },
      error: function(jqXHR, textStatus, error) { 
                 ajaxErrorHandler(jqXHR, status, error, "Could not get registered process list from iGUESS!");
                }
    });
  };


  var getProcessHtml = function(proc, isRegistered)
  {
    var html = 
      '<h2 class="process-title">' + proc.title + '</h2>' +
      '<div class="catalog-item" id="proc-' + proc.identifier + '"">' +   // [1]
        '<div class = "process-identifier">' +
          'Identifier: <span>' + proc.identifier + '</span>' +
        '</div>' + 
        '<div class="process-descr">' + 
            (proc.abstract && linkify(proc.abstract) || "No description") + 
        '</div>'+
        '<table class="model-descr-table"><tbody class="inputs">';        // [2]
    
    // Inputs
    var inputs = proc.dataInputs;
    html += createInputOutputTableRow(inputs, inputs.length > 0 ? 
                                      "Model Inputs" : "No Inputs");
    // Outputs
    var outputs = proc.processOutputs;
    html += createInputOutputTableRow(outputs, outputs.length > 0 ? 
                                      "Model Outputs" : "No Outputs");

    html += "</tbody></table>";   // [2]

    html += getRegisterControlHtml(proc.identifier, isRegistered);

    html += "</div>";             // [1]

    return html;
  };


  var createInputOutputTableRow = function(items, title) 
  {
    var html = '<tr><th colspan=3 class="group-header" scope="rowgroup">' + 
                  '<div class="outdent">' + title + '</div>' +
               '</th></tr>';

    if(items.length > 0)
        html += '<tr><th>Parameter Name</th><th>Identifier</th><th>Description</th></tr>';

    for(var i = 0, len = items.length; i < len; i++) {
      var item = items[i];

      html += '<tr>' + 
        '<td class="param-name">'  + (item.title ? item.title : item.identifier) + '</td>'  +
        '<td class="param-name">[' + item.identifier                             + ']</td>' +
        '<td class="param-descr">' + (item.abstract ? item.abstract : "")        + '</td>'  +
      '</tr>';            
    }

    return html;
  };


  var CurrentServerUrl = "";

  var registerProcess = function(thiiis, checkbox, process)
  {
    var processParams = "";

    for(var i = 0, len = process.dataInputs.length; i < len; i++)
    {
      var param = process.dataInputs[i];
      processParams += 
        "&process_inputs[" + i + "][identifier]=" + param.identifier +
        "&process_inputs[" + i + "][title]="      + param.title +
        "&process_inputs[" + i + "][abstract]="   + param.abstract +
        "&process_inputs[" + i + "][min_occurs]=" + param.min_occurs +
        "&process_inputs[" + i + "][max_occurs]=" + param.max_occurs +
        "&process_inputs[" + i + "][datatype]="   + (param["literalData"] ? param.literalData.dataType : "ComplexData");
    }


    for(var i = 0, len = process.processOutputs.length; i < len; i++)
    {
      var param = process.processOutputs[i];
      processParams += 
        "&process_outputs[" + i + "][identifier]=" + param.identifier +
        "&process_outputs[" + i + "][title]="      + param.title +
        "&process_outputs[" + i + "][abstract]="   + param.abstract +
        "&process_outputs[" + i + "][datatype]="   + (param["literalData"] ? param.literalData.dataType : "ComplexData");
    }


    $.ajax({
      type: "PUT",
      url:  "<%= url_for(:controller=>:wps_processes, :action=>:register, :format=>:json) %>",
      data: "cityId="      + "<%= raw @current_city.id %>" +
            "&server_url="            + CurrentServerUrl +
            "&server[url]="           + CurrentServerUrl +
            "&server[title]="         + CurrentProbe.serverInfo.title +
            "&server[abstract]="      + CurrentProbe.serverInfo.abstract +
            "&server[provider_name]=" + CurrentProbe.serverInfo.provider_name +
            "&server[contact_email]=" + CurrentProbe.serverInfo.contact_email +
            "&server[contact_name]="  + CurrentProbe.serverInfo.contact_name +
            "&process[identifier]="   + process.identifier +
            "&process[title]="        + process.title +
            "&process[abstract]="     + process.abstract +
            processParams + 
            "&serverDetails="         + encodeURIComponent(JSON.stringify(CurrentProbe.serverInfo)),
      headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
      success: function(data, status, jqXHR)  { 
          checkbox.checked = true;
          thiiis.toggleClass("checked");
          console.log(thiiis);
          alert(jqXHR.responseJSON.message);
        },
      error: function(jqXHR, textStatus, error) { alert("Error registering server: " + error); }
    });
  };


  var unregisterProcess = function(thiiis, checkbox, process)
  {
    if(!confirm(
      "Are you sure you want to unregister this process?\n\n" + 
      "If you do, none of the functions will be available for new Module Configurations.\n\n" +
      "Existing configurations will continue to work.")) 
    {
      e.preventDefault();
      return;
    }

    // Let the server know this server is no longer registered -- to do this we mark
    // the corresponding record in the wps-servers table as deleted.  We don't actually
    //  delete it as there may be mod_configs that still depend on it.
    $.ajax({
      type: "PUT",
      url:  "<%= url_for(:controller=>:wps_processes, :action=>:unregister, :format=>:json) %>",
      data: "cityId="           + "<%= raw @current_city.id %>" +
            "&server_url="      + CurrentServerUrl +
            "&proc_identifier=" + process.identifier,
      headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
      success: function(data, status, jqXHR)  { 
          checkbox.checked = false;
          thiiis.toggleClass("checked");
          alert(jqXHR.responseJSON.message);
        },
      error: function(jqXHR, textStatus, error) { alert("Error unregistering server: " + error); }
    });
  };


  var addRegisterClickHandler = function()
  {
    // When the toggle switch is clicked, check off / de-select the associated checkbox
    // Want to find this when we search for "registered_"
    $(".toggle").click(function(e) 
    {
      var checkboxId = $(this).attr("ref");
      var checkbox   = document.getElementById(checkboxId);
      var procIdentifier = getIdentifierFromCheckboxId(checkboxId);
      var process = CurrentProbe.serverInfo.wps_processes[procIdentifier];

      var thiiis = $(this);   // Remember "this" for when the ajax requests return

      if(checkbox.checked)
       unregisterProcess(thiiis, checkbox, process);

      else 
        registerProcess(thiiis, checkbox, process);

      e.preventDefault();

    });  // end toggle state change handler
  };


</script>
