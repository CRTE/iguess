<h1>Register WPS Server</h1>


<div id="error-list" class="explanation-problem" style="display: none"></div>

<div class="explanation">
  <p>blah blah</p>
</div>

<div class="url-form">
  <table class="url-form">
    <tr>
      <td>
        <input id="server_url" type="text" name="format" value="" placeholder="Enter WPS server URL"/>
        <button type="button" id="load_services">Load</button>
      </td>
    </tr>
  </table>
</div>

<div class="services-display">

  <div class="progress-container">
    <span class="probing" id="probing-wps">Probing WPS server...<span class="loading_indicator"></span></span>
  </div>

  <div class="server-info">
    <div class="server-name"  id="server-name"></div>
    <div class="server-descr" id="server-descr"></div>
    <div class="server-owner" id="server-owner"></div>

    <div id="results-display"><!-- Search results will be shown here --></div>
  </div>
</div>


<script>
  $(document).ready(function(){
    onLoadServicesPageReady();
  });

  var showProbingIndicators = function() {
    $(".progress-container").show();
  };


  var hideProbingIndicators = function() {
    $(".progress-container").hide();
  };

  var resetServiceLoadedStatus = function() {
    // Nothing to do
  };


  //  declaration -- maintain same public interface as ServiceProbe on mass_import page
  var ServiceProbe = function(serverUrl) 
  {   
    this.serverUrl = serverUrl;
    this.serverInfo = {};

    var self = this;    // Stored pointer to ourselves, will be needed in the callback

    // :::public:::
    this.startProbing = function() {
      this.serverInfo = {};   // Clear any previous results
      WPS.getCapabilities(self.serverUrl, self.onWpsGetCapabilitiesSucceeded);
      WPS.describeProcess(self.serverUrl, self.onWpsDescribeProcessSucceeded);
    };

    // :::private:::
    this.onWpsGetCapabilitiesSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WPS", response, capabilities)) {
        self.serverInfo = extractServerInfoVals(capabilities);

        doneProcessing(self.serverUrl, "WPS", self.serverInfo);
      }
      else    // Error:
        doneProcessing(self.serverUrl, "WPS", null);
    };

    this.onWpsDescribeProcessSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WPS", response, capabilities)) {
        self.serverInfo.wps_processes = capabilities.processDescriptions;
        doneProcessing(self.serverUrl, "WPS", self.serverInfo);
      }
      else    // Error:
        doneProcessing(self.serverUrl, "WPS", null);
    };
  };


  // Wrap all these assignments in try/catch to ensure no crashes if values are missing
  var extractServerInfoVals = function(capabilities)
  {
    var serverInfo = {};

    try {
      serverInfo.title = capabilities.serviceIdentification.title;
    } catch(error) {
      serverInfo.title = null;
    }

    try {
      serverInfo.abstract = capabilities.serviceIdentification["abstract"];
    } catch(error) {
      serverInfo.abstract = null;
    }

    try {
      serverInfo.provider_name = capabilities.serviceProvider.providerName;
    } catch(error) {
      serverInfo.provider_name = null;
    }

    try {
      serverInfo.contact_email = capabilities.serviceProvider.serviceContact.contactInfo.address.electronicMailAddress;
    } catch(error) {
      serverInfo.contact_email = null;
    }

    try {
      serverInfo.contact_name = capabilities.serviceProvider.serviceContact.individualName;
    } catch(error) {
      serverInfo.contact_name = null;
    }

    return serverInfo;
  };



  var wpsProcessingComplete = 0;  
  

  var resetServiceLoadedStatus = function() {
    wpsProcessingComplete = 0;
  };


  var currentServerInfo = null;

  // Called when we've gotten whatever response we're going to get from the server in question
  // i.e. when a WFS response arrives.  More responses might be coming (from WMS, and WCS, for example).
  // If an error has ocurred, serverInfo will be null
  var doneProcessing = function(url, type, serverInfo) 
  {
    wpsProcessingComplete++;

    // Make sure we've heard from all requests before continuing
    if(wpsProcessingComplete != 2)  
      return; 

    $(".progress-container").hide();

    if(serverInfo)
    {
      currentServerInfo = serverInfo;
      displayServerDetails(serverInfo, type);   // Display this as it comes in
      displayServices(serverInfo);
      appendRegisterCheckbox("register-wps", false);
    }
    else
      noResponse();
  };


  var noResponse = function() {
    $("#results-display").html('<div class="error-header">Please check the number and dial again</div>' +
                               '<div class="error-body">No services could be found on the specified server.<br>' +
                               'Either the URL is not that of a WPS process server, or the server is not responding.' +
                               '</div>');
    $(".server-info").show();
  };


  var displayServices = function(serverInfo) 
  {
    var html = "";

    for(var key in serverInfo.processes) {
      var proc = serverInfo.processes[key];
      html += "<div>Proc: " + proc.title + " -- " + proc["abstract"] + "</div>";
    }

    html += "<div id='register-control'></div>";

    html += '<div id="module-catalog">';


    for(var key in serverInfo.wps_processes) { 
      var p = serverInfo.wps_processes[key];

      html += 
        '<h2 class="process-title">' + p.title + '</h2>' +
        '<div class="catalog-item">' + 
          '<div class = "process-identifier">' +
            'Identifier: <span>' + p.identifier + '</span>' +
          '</div>' + 
          '<div class="process-descr">' + p.abstract + '</div>' + 

          '<table class="model-descr-table">' + 
            '<tbody class="inputs">';
              
      
      // Inputs
      var inputs = p.dataInputs;
      html += createInputOutputTableRow(inputs, inputs.length > 0 ? "Model Inputs" : "No Inputs");

      
      // Outputs
      var outputs = p.processOutputs;
      html += createInputOutputTableRow(outputs, outputs.length > 0 ? "Model Outputs" : "No Outputs");

      html += "</tbody></table></div>";
    }

    $("#results-display").html(html);
    $(".server-info").show();

    initializeAccordion('#module-catalog > h2', '.catalog-item');
  };


  var appendRegisterCheckbox = function(name, registered)
  {
    var registerControl = $(document.createElement("input"));


    $('#register-control').append(getRegisterControl(name, registered));
    
    addSwitchboxHandler();

    // When the toggle switch is clicked, check off / de-select the associated checkbox
    // Want to find this when we search for "registered_"
    $(".toggle").click(function(e) 
    {
      var checkboxID = $(this).attr("ref");
      var checkbox   = document.getElementById(checkboxID);

      var serverUrl = getServerUrl();


      if(checkbox.checked && !confirm(
          "Are you sure you want to unregister this WPS server?\n\n" + 
          "If you do, none of the functions will be available for new Module Configurations.\n\n" +
          "Existing configurations will continue to work.")) 
      {
        e.preventDefault();
        return;
      }

      var thiiis = $(this);   // Remember "this" for when the ajax requests return

      if(checkbox.checked) {
        // ===== Unregister WPS =====

        // Let the server know this server is no longer registered -- to do this we mark
        // the corresponding record in the wps-servers table as deleted.  We don't actually
        //  delete it as there may be mod_configs that still depend on it.
        $.ajax({
          type: "PUT",
          url:  "<%= url_for(:controller=>:wps_servers, :action=>:unregister, :format=>:json) %>",
          data: "cityId="      + "<%= raw @current_city.id %>" +
                "&server_url=" + serverUrl,
          headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
          success: function(data, status, jqXHR)  { 
              checkbox.checked = false;
              thiiis.toggleClass("checked");
              alert(jqXHR.responseText);
            },
          error: function(jqXHR, status, error) { 
              alert(jqXHR.responseText); 
            }
        });

      } else {
        // ===== Register WPS =====
        $.ajax({
          type: "PUT",
          url:  "<%= url_for(:controller=>:wps_servers, :action=>:register, :format=>:json) %>",
          data: "cityId="      + "<%= raw @current_city.id %>" +
                "&server_url="            + serverUrl +
                "&server[url]="           + serverUrl +
                "&server[title]="         + currentServerInfo.title +
                "&server[abstract]="      + currentServerInfo.abstract +
                "&server[provider_name]=" + currentServerInfo.provider_name +
                "&server[contact_email]=" + currentServerInfo.contact_email +
                "&server[city_id]="       + "<%= raw @current_city.id %>",
          headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
          success: function(data, status, jqXHR)  { 
              checkbox.checked = true;
              thiiis.toggleClass("checked");
              alert(jqXHR.responseText);
            },
          error: function(jqXHR, status, error) { 
              alert(jqXHR.responseText); 
            }
        });
      }

      e.preventDefault();

    });  // end toggle state change handler
  };


  var createInputOutputTableRow = function(items, title) 
  {
    var html = '<tr><th colspan=3 class="group-header" scope="rowgroup"><div class="outdent">' +
               title +
               '</div></th></tr>';

    if(items.length > 0)
        html += '<tr><th>Parameter Name</th><th>Identifier</th><th>Description</th></tr>';

    for(var i = 0, len = items.length; i < len; i++) {
      var item = items[i];

      html += '<tr>' + 
        '<td class="param-name">'  + (item.title ? item.title : item.identifier) + '</td>'  +
        '<td class="param-name">[' + item.identifier                             + ']</td>' +
        '<td class="param-descr">' + (item.abstract ? item.abstract : "")        + '</td>'  +
      '</tr>';            
    }

    return html;
  };

</script>
