<script src="https://raw.github.com/carhartl/jquery-cookie/master/jquery.cookie.js"></script>   <!-- Must get rid of this!!!-->

<script type="text/javascript">

  // Let the server know this layer is now registered -- to do this we must create a new record in
  // our datasets table.

  var onLocationChanged = function(city)
  {
    $.ajax({
      type: 'POST',
      url: '<%= url_for(:controller => 'datasets', :action => 'get_for_city', :format => :json) %>',
      data: 'cityName=' + $.cookie('city'),
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
      success: function(data) {
        renderTable(data);
      }
    });
  }

  $(document).ready(function()
  {
    onLocationChanged('<%= @current_city.name %>');   // Build the initial dataset list
  });


  // Make the railsIdLookup, which looks up a unique id for each  URL / identifier pair.
  // Allows us to have shorter class names and avoid illegal characters in a class which might exist in a URL.
  railsIdLookup = { };

  <%= @datasets.reject{ |d| d.finalized == false }
               .uniq{ |x| x.server_url + x.identifier }
               .map{ |d| "railsIdLookup[makeKey('" + d.server_url + "','" + d.identifier + "')] = '" + d.id.to_s + "';\n" }
               .join(' ') %>


  // We've got a new batch of datasets to display!
  // Note that for the status div, all rows from the same server share the same class.  Each has a unique id.
  renderTable = function(datasets) {
    $('#dataset-list').empty();    // Clear table
    for(var i = 0; i < datasets.length; i++) {
      var d = datasets[i];


console.log(d);

      var r = railsIdLookup[makeKey(d.server_url, d.identifier)];


      $('#dataset-list').append(
          '<tr valign=middle>' +
            '<td class="dataset-name-' + serverUrlIdLookup[d.server_url] + ' dataset-name2-' + r + '" ' +
                  '" title="Server URL: ' + d.server_url + '">Retrieving...' +
            '</td>' +
            '<td nowrap>' + (d.dataset_type == "" ? "Unknown" : d.dataset_type) + '</td>' +
            '<td width = 145><div class="status-' + serverUrlIdLookup[d.server_url] + ' status2-' + r + '">Probing server...  ' +
            '<img src="/assets/loading_spinner.gif"></div></td>' +
            '<td><a href="/datasets/' + d.id + '" data-confirm="Are you sure you want to unregister this dataset?" data-method="delete" data-remote="true" rel="nofollow">Unregister</a></td> ' + 
            // '<td>SHOW MODULE LIST HERE??</td>' +
          '</tr>'
      );

      processUrl(d.server_url);
    }
  }


  // The following creates a mapping of server urls to short unique tokens, in both ruby and javascript.
  <% serverUrlIdLookup = { } %>
  <% @datasets.reject{ |d| d.finalized == false }
              .map{ |d| serverUrlIdLookup[d.server_url] = d.id.to_s } %>

  serverUrlIdLookup = { };
  <% lines = "" %>
  <% serverUrlIdLookup.each{ |u, i| lines += "serverUrlIdLookup['" + u + "'] = '" + i + "'; " } %>
  <%= raw lines %>

</script>


<div>
  <h1 class="page_header">Registered Datasets</h1>
  <div class="page_subheader"></div>

  <!--- < %= render :partial => '/shared/sortable_table_code.html.erb', :locals => { :initialSortlist => "[[1,0], [0,0]]" } %> -->


  <script type="text/javascript">
    $(function() {
      var theTable = $('#sortable_table')

      theTable.find("tbody > tr").find("td:eq(1)").mousedown(function(){
        $(this).prev().find(":checkbox").click()
      });

      $("#filter").keyup(function() {
        $.uiTableFilter( theTable, this.value );
      })

      $('#filter-form').submit(function(){
        theTable.find("tbody > tr:visible > td:eq(1)").mousedown();
        return false;
      }).focus(); //Give focus to input field
    });
  </script>


  <script type="text/javascript">
    <% index = 0 %>
    var layerRecords = { };
    var layerStores = { };
    var serverDatasets = { };
    var serverStatus = { };

    var processedUrls = [];


    var processUrl = function(url)
    {
      // This function will be called for every dataset registered with the current city.  Many will have the same
      // server.  Avoid processing the same server twice.
      // Called from renderTable(), which is called from onCityChange() event handler
      if(processedUrls.hasObject(url)) {  setLayerStatus(url); return;  }

      processedUrls.push(url);

      // Should be an associative array!!!  TODO
      layerRecords[url] = [ ];
      layerStores [url] = [ ];
      serverStatus[url] = [ ];

      // Create an association between a server and all registered datasets it hosts
      <% @server_urls.each do |url| %>    <%# These could be wms, wfs, or wcs addresses %>
        serverDatasets['<%= url.gsub(/\\/, '\\\\\\') %>'] = [<%= @datasets.reject {|d| d.server_url != url}
                                                                        .map{|d| "'" + d.identifier + "'"}
                                                                        .join(' ,') %>];
      <% end %>

      WMS.updateLayerList(url, success, failure);
      WFS.updateLayerList(url, success, failure);
    }


    function success(store, records) // Need to validate each item in store
    {
      var url = unwrapServer(store.url, store.format.name);

      serverStatus[url].push(true);
      layerRecords[url].push(records.length);
      layerStores[url].push(store);

      setLayerStatus(url);
    }

    function failure(e,f,g,h,i,j)    // All items for this server failed
    {
      alert("Error retrieving data -- see console for details!");
      console.log(arguments);
    }


    function setLayerStatus(serverUrl)
    {

      // Wait until we've heard back from all servers: wfs and wms
      if(serverStatus[serverUrl].length < 2) { return; }

      serverUrlId = serverUrlIdLookup[serverUrl];


      if(!(serverStatus[serverUrl][0] || serverStatus[serverUrl][1])) {    // Server failed, all datasets from this server kaput
        $('.status-' + serverUrlId).html('<img src="/assets/server_responding_no.png" alt="WMS server not responding">');
        $('.dataset-name-' + serverUrlId).text("Unknown");
        return;
      }

      // At least one server succeeded, vist each one-by-one

      var datasets = serverDatasets[serverUrl];   // List of registered datasets available on this server
      console.log(serverDatasets, serverUrl);console.log(serverUrl);

      datasetCount = datasets.length;

      for(var i = 0; i < datasetCount; i++) {     // Iterate through datasets from the server one-by-one
        var found = false;
        var layerRecordsCount = layerRecords[serverUrl].length;

        for(var j = 0; j < layerRecordsCount && !found; j++) {
          var store    = layerStores[serverUrl][j];
          var records  = layerRecords[serverUrl][j];

          for(var k = 0; k < records; k++) {
            var record = store.getAt(k);

            var identifier = record.get("name");

            if(datasets[i] == identifier) {
              var railsId = railsIdLookup[makeKey(serverUrl, identifier)];

              var title = record.get("title") || record.get("name");
              title = title.replace(/ /g,'&nbsp;');

              // See http://stackoverflow.com/questions/244758/jquery-animation-smooth-size-transition
              var selector = '.dataset-name2-' + railsId;
              $(selector).html(title);

              var railsId = railsIdLookup[makeKey(serverUrl, datasets[i])];
              $('.status2-' + railsId).html('<img src="/assets/layer_available_yes.png" alt="Layer available">');

              found = true;
              break;
            }
          }
        }

        if(!found) {
          var railsId = railsIdLookup[makeKey(serverUrl, datasets[i])];
          $('.status2-' + railsId).html('<img src="/assets/layer_available_no.png" alt="Layer not available">');
        }
      }
    }

  </script>



  <form id="filter-form">Filter: <input name="filter" id="filter" value="" maxlength="30" size="30" type="text"></form>

  <div class="hint">Hint: Filter table by typing in the box above; sort by clicking on column headers; use Ctrl to sort by multiple columns</div>

  <table id="sortable_table" class="zebra sortable">
    <thead>
      <tr><th>Name</th><th>Type</th><th>Status</th><th></th><!-- <th>Configured Modules Using Dataset</th> --></tr>
    </thead>

    <tbody id="dataset-list">

    </tbody>
  </table>



  <%= button_to "Register Datasets", :controller => 'datasets', :action => 'mass_import', :id => 1 %>

  <br />
</div>


