
<script type="text/javascript">
 $(document).ready(function() {
    onLocationChanged('<%= @current_city.name %>');   // Build the initial dataset list
    // $('#sortable_table').tablesorter();               // Initialize sorter
  });
</script>

<%= render :partial => '/shared/build_registered_layers.html.erb' %>  <%# Builds registeredDataLayers structure %>

<%# Include some map related utility functions; these need to be processed by Rails so they have to be in a partial %>
<%= render :partial => '/shared/map_utils.html.erb' %>


<script type="text/javascript">

  // We've got a new batch of datasets to display!
  // Note that for the status div, all rows from the same server share a common class.  Each has a unique id.
  var renderTable = function(datasets) 
  {
    $('#dataset-list').empty();    // Clear table
    resetProbe();                  // Clear out old probe results

    for(var i = 0, len = datasets.length; i < len; i++) {
      var dataset = datasets[i];

      var datasetId = registeredDatasets[dataset.server_url][dataset.identifier];
      $('#dataset-list').append(renderTableRow(dataset, datasetId));

      $('#infotables').append(renderInfoTable(dataset, datasetId));

      probeDataServer(dataset.server_url, 'ALL');
    }

    $('img[rel]').overlay();                             // Set up the layer info overlays
    $('img[rel]').click(function(){ hideDetails(); });   // Close details panel on open

    $('.show-details').click(function(){ showDetails(); });


          // Make sure table is sorted
      // var sorting = [[1,0], [0,0]]; 
      // // sort on the first column 

      // $('#sortable_table').trigger("update"); 
      // $('#sortable_table').trigger("sorton",[sorting]); 
  }; 


  var onLocationChanged = function(cityName) {
    MapUtils.retrieveDatasetsForCity(cityName, function(data) { renderTable(data);
                                                                hideUnregisterAndFriends(); });
  };


  // Generate html for Registered Datasets table row
  // Note: status-xxx below are classes that are common to all datasets on a server
  //       status2-xxx are classes that are common only to server-identifier pairs (i.e. duplicate datasets)
  var renderTableRow = function(dataset, datasetId) {
    return '<tr id="dataset-id-' + dataset.id + '" onmouseover="$(this).find(\'.invisible-cell\').show();"' +
                                                  'onmouseout ="$(this).find(\'.invisible-cell\').hide();">' +
      '<td class="dataset-name-' + registeredDataAndMapServers[dataset.server_url] + '">' +
        '<span class="dataset-title-' + datasetId + '">Retrieving...</span>' +
        '<img src="/assets/small_question_mark.gif" class="info-icon" ' +
                  'alt="More info" title="Click for details" rel="#infotable-' + datasetId + '">' +
      '</td>' +
      '<td nowrap>' + (dataset.dataset_tags.length === 0 ? "None" : createTagList(dataset.dataset_tags)) + '</td>' +
      '<td width=145><div class="status-' + registeredDataAndMapServers[dataset.server_url] + 
        ' status2-' + datasetId + '">Probing server...  ' +
        '<img src="/assets/loading_spinner.gif"></div></td>' +
      '<td class="invisible-cell"><a href="/datasets/' + dataset.id + '" ' + 
        'data-confirm="Are you sure you want to unregister this dataset?" data-method="delete" ' +
        'data-remote="true" rel="nofollow">Unregister</a></td> ' + 
      // '<td>SHOW MODULE LIST HERE??</td>' +
    '</tr>';
  };


  var createTagList = function(taglist) 
  {
    var list = "";

    for(var i = 0, len = taglist.length; i < len; i++) {
      list += '<span class="tag">' + taglist[i].tag + '</span>';
    }

    return list; 
  };


  // We found the layer
  var updateLayerInfo = function(serverUrl, datasetId, dataset) 
  {
    var name     = dataset.title.replace(/ /g,'&nbsp;');
    var descr    = dataset.descr;
    var services = dataset.services;

    $('.dataset-title-' + datasetId).html(name);    // Appears in the name column, also on infotable popup
    $('.dataset-descr-' + datasetId).html(descr);
    $('#results-'       + datasetId).html('');      // Clear

    var url = '';
    // Parse services... provide links for whatever services
    for (var i = 0, len = services.length; i < len; i++) {
      url = getGetCapUrl(serverUrl, services[i]);
      $('#results-' + datasetId).append('<a href="' + url + '" target="_blank">' + services[i] + '</a>&nbsp;');
    }
    if(url !== '') {
      $('#results-' + datasetId).append('&nbsp;(Right-click, Copy Link Location)');
    }
    $('.status2-' + datasetId).html('<img class="status-indicator" src="/assets/layer_available_yes.png" alt="Layer available">');
  };


  // We did not find a layer we expected to
  var expectedLayerNotFound = function(datasetId)
  {
    $('.dataset-title-' + datasetId).html('Missing');   // Appears in the name column, also on infotable popup
    $('.dataset-descr-' + datasetId).html('This dataset appears to have been removed from the server');
    $('#results-'       + datasetId).html('');          // Clear
    $('.status2-'       + datasetId).html('<img class="status-indicator" src="/assets/layer_available_no.png" alt="Layer not available">');
  };


  var registeredDatasetLists  = { };

  // Create an association between a server and all registered datasets it hosts
  // Creates a series of lines that look like this:
  //  registeredDatasetLists['http://montreuil.dynmap.com/carte_pour_iguess/carteWS.php'] = ['_IRIS99_montreuil_cc49', 'Bati_remarquable',
  //     '_domaine_non_cadastre_2011', 'Cimetiere_line', '_domaine_non_cadastr__2011_CC49', '_IRIS99_montreuil_cc49_line'];
  //
  <% @dataserver_urls.each do |url| %>    <%# These could be wms, wfs, or wcs addresses %>
    registeredDatasetLists['<%= url.gsub(/\\/, '\\\\\\') %>'] = [<%= @datasets.reject {|d| d.server_url != url}
                                                                    .map{|d| "'" + d.identifier + "'"}
                                                                    .join(', ') %>];
  <% end %>


  // This will be called for every server response, whether successful or a failure.  If we are probing multiple services, this will
  // be called once for each service.  The serverResponse object for a particular service will remain undefined until the request to that
  // service has returned.
  // 
  // We have a response of some sort from serverUrl -- update the datasets table to show it.
  // serverResponses should be an object with a ServerResponse object for WFS, WMS, and WCS.
  var gotServerResponse = function(serverUrl, serverResponses)
  {
    var serverId = registeredDataAndMapServers[serverUrl]; 

    // Wait until we've heard back from all servers: wfs, wms, and wcs
    if(!!!serverResponses["WMS"] || !!!serverResponses["WFS"] || !!!serverResponses["WCS"]) { return; } 


    // Prioritize WMS response, if any
    var serverName  = serverResponses["WMS"].serverName  || serverResponses["WFS"].serverName  || serverResponses["WCS"].serverName;
    var serverDescr = serverResponses["WMS"].serverDescr || serverResponses["WFS"].serverDescr || serverResponses["WCS"].serverDescr;

    if(serverName) {
      $('.server-name-'  + serverId).html(serverName);
      $('.server-descr-' + serverId).html(serverDescr || serverName);
    }

    if(!(serverResponses["WMS"].success || serverResponses["WFS"].success || serverResponses["WCS"].success)) {    
      // All services failed, all datasets from this server ganz kaput
      $('.status-' + serverId).html('<img class="status-indicator" src="/assets/server_responding_no.png" alt="WMS server not responding">');
      $('.dataset-name-' + serverId).text("Unknown");
      return;
    }

    // At least one server succeeded, vist each dataset one-by-one

    var ids = registeredDatasetLists[serverUrl];   // List of registered datasets available on this server

    for(var i = 0, recs = ids.length; i < recs; i++) {
      var datasetId = registeredDatasets[serverUrl][ids[i]];

      var dataset = Datasets[datasetId];
      if(!!!dataset) {
        expectedLayerNotFound(datasetId);
        return;
      }

      updateLayerInfo(serverUrl, datasetId, dataset);
    }
  };


  $(document).bind('ajax:success', function(xhr, data, status) { 
    $('#dataset-id-' + data).hide();
  });

</script>


<script type="text/javascript">
  $(function() {
    var theTable = $('#sortable_table')

    theTable.find("tbody > tr").find("td:eq(1)").mousedown(function(){
      $(this).prev().find(":checkbox").click()
    });

    $("#filter").keyup(function() {
      $.uiTableFilter( theTable, this.value );
    })

    $('#filter-form').submit(function(){
      theTable.find("tbody > tr:visible > td:eq(1)").mousedown();
      return false;
    }).focus(); //Give focus to input field
  });
</script>


<!-- The HTML -->

<div>
  <h1 class="page_header">Registered Datasets</h1>

  <form id="filter-form">Filter: <input name="filter" id="filter" value="" maxlength="30" size="30" type="text"></form>

  <div class="hint">Hint: Filter table by typing in the box above; sort by clicking on column headers; use Ctrl to sort by multiple columns</div>

  <table id="sortable_table" class="zebra sortable">
    <thead>
      <tr><th>Name</th><th>Tags</th><th class="center">Status</th><!-- <th>Configured Modules Using Dataset</th> --></tr>
    </thead>

    <tbody id="dataset-list"></tbody>  <!-- Will be populated later -->
  </table>

  <div id="infotables"><!-- Placeholder for popup infotables --></div>


  <%= button_to "Register Datasets", :controller => 'datasets', :action => 'mass_import', :id => 1 %>

  <br />
</div>


