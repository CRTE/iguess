<%# This function builds a list of data layers that are registered, and are thus stored in the database.
    Layers are actually objects with a type and rubyId field.  Display name should come from the data server itself, and will
      be retrieved separately %>

<script type="text/javascript">

  // User has clicked on the [x] on a tag... remove it!
  var deleteTagClickHandler = function(ctrl)
  {
    var serverUrl         = ctrl.data('url');
    var datasetIdentifier = ctrl.data('identifier');
    var tagVal            = ctrl.parent().text().trim();
    
    if(confirmDeleteTag(serverUrl, datasetIdentifier, tagVal))
      deleteTag(serverUrl, datasetIdentifier, tagVal);
  };


  var deleteFolderTagClickHandler = function(ctrl)
  {
    // We don't ask for a confirmation here...
    deleteFolderTag(ctrl.data('url'), 
                    ctrl.data('identifier'), 
                    ctrl.parent().text().trim());
  };

  // Take an array or comma-separated list of tags and format them into some presentation quality HTML
  // tagclass will either be "tag" or "folderTag".  Note that we have Rails code that does something similar 
  // in index.html.erb
  var createTagList = function(taglist, deletable, serverUrl, datasetIdentifier, tagclass) 
  {
    if(taglist.length == 0)
      return "";

    if(typeof(taglist) == "string")
      taglist = taglist.split(",");


    if(deletable)   // or folder-tag-delete-button
      var delBtn = '<span class="' + tagclass + '-delete-button" ' +
                   'data-url="' + serverUrl + '" ' +
                   'data-identifier="' + datasetIdentifier + '"></span>';
    else
      var delBtn = "";


    var renderedList = "";
    var strings = typeof(taglist[0]) == "string";


    for(var i = 0, len = taglist.length; i < len; i++) 
    {
      var tag = strings ? taglist[i] : taglist[i].tag;
      var classList = tagclass;
      // Add a special class to special tags
      if(tag == "Mapping")
        classList += " mapping-tag";
      else if(tag == "Area of Interest")
        classList += " aoi-tag";

      renderedList += '<span class="' + classList + '">' + delBtn + tag + '</span> ';  // Trailing space required
    }

   return renderedList; 
  };


  var addDeleteTagClickHander = function(isProcessingTag) 
  {
    // Add a handler to delete tags when user clicks on the [x]
    if(isProcessingTag)
      $('.tag-delete-button')       .on('click', function(event){ deleteTagClickHandler($(this)) });
    else
      $('.folder-tag-delete-button').on('click', function(event){ deleteFolderTagClickHandler($(this)) });
  };


  // This will update any tag lists composed of tags that do have a delete control, such as 
  // the tags entries on the dataset info popups.  Note that we do not combine folder tags and
  // processing tags, and do want to add a 'No Tags' placeholder if the list is empty.
  var doUpdateDeleteableTags = function(serverUrl, datasetIdentifier, id, tags, tagclass)
  {
    var urlId = cssEscape(serverUrl + datasetIdentifier);

    $('.' + id + '-deletable-' + urlId).html(
          createTagList(tags, true, serverUrl, datasetIdentifier, tagclass));

    addDeleteTagClickHander(tagclass == 'tag');
  };


  // This will update any tag lists composed of tags that do not have a delete control, such as 
  // the Tags column of the Registered Datasets screen.  Note that we combine folder tags and
  // processing tags, and do not want to add a 'No Tags' placeholder if the list is empty.
  var doUpdateNonDeleteableTags = function(serverUrl, datasetIdentifier, id, tags, tagclass)
  {
    var urlId = cssEscape(serverUrl + datasetIdentifier);

    $('.' + id + '-' + urlId).html(
          createTagList(tags, false, serverUrl, datasetIdentifier, tagclass));
  };


  var updateTags = function(serverUrl, datasetIdentifier, tags)
  {
    doUpdateDeleteableTags   (serverUrl, datasetIdentifier, 'taglist', tags, 'tag');
    doUpdateNonDeleteableTags(serverUrl, datasetIdentifier, 'taglist', tags, 'tag');
  };


  var updateFolderTags = function(serverUrl, datasetIdentifier, tags)
  {
    doUpdateDeleteableTags   (serverUrl, datasetIdentifier, 'folder-taglist', tags, 'folder-tag');
    doUpdateNonDeleteableTags(serverUrl, datasetIdentifier, 'folder-taglist', tags, 'folder-tag');
  };


  // Some string constants
  var INPUT_FIELD_PREFIX = "new-tag-";
  var IGNORE_THIS        = "__Ignore_This__";
  var NEW_TAG            = "__New_Tag__";


  var tagPickerChanged = function(ctrl)
  {
    ctrl.blur();    // For firefox?

    if(ctrl.val() == IGNORE_THIS) 
      return; 

    addTag(ctrl);
  };


 var folderTagPickerChanged = function(ctrl, tag)
  {
    ctrl.blur();    // For firefox?

    if(ctrl.val() == IGNORE_THIS) 
      return; 

    if(ctrl.val() == NEW_TAG) {
      $("#" + INPUT_FIELD_PREFIX + ctrl[0].id).show();
      $("#" + INPUT_FIELD_PREFIX + ctrl[0].id).focus();
      return;
    }

    addFolderTag(ctrl, tag);
  };


  // TODO: This should really be computed server-side, and should only consider config datasets that we control
  // To understand this mess, the best way to understand what it means is to look at the generated code using
  // view source, and see what it makes.
  TagIsInUse = {};
  <%= raw @datasets.map{ |d| 
          d.config_datasets.map{ |c| 'if(!TagIsInUse["' + c.input_identifier + '"])' +
                                     '  TagIsInUse["' + c.input_identifier + '"] = {};' + 
                                     'if(!TagIsInUse["' + c.input_identifier + '"]' +
                                               '[cssEscape("' + d.server_url.gsub(/\\/, '\\\\\\') + d.identifier + '")]) ' +
                                     '  TagIsInUse["' + c.input_identifier + '"]' +
                                               '[cssEscape("' + d.server_url.gsub(/\\/, '\\\\\\') + d.identifier + '")] = 0;' +
                                     'TagIsInUse["' + c.input_identifier + '"]' +
                                               '[cssEscape("' + d.server_url.gsub(/\\/, '\\\\\\') + d.identifier + '")]++;'
                              }
                      }.join(' ');
  %>   


  // If the user is removing a tag that will disassociate a dataset with a modconfig, ask the user
  // to confirm
  var confirmDeleteTag = function(serverUrl, datasetIdentifier, tagVal) 
  {
    var id = cssEscape(serverUrl + datasetIdentifier);

    if(TagIsInUse[tagVal] && TagIsInUse[tagVal][id] > 0) {
      var useCount = TagIsInUse[tagVal][id];
      var c        = (useCount == 1) ? "configuration" : "configurations";
      var t        = (useCount == 1) ? "this"          : "these";
      var th       = (useCount == 1) ? "it"            : "them";

      return confirm("This dataset is in use by " + useCount + " " + c + ". " +
                     "Changing its type will cause it to be removed from " + t + " " + c + ".\n\n" +
                     "Click OK if you are sure you want to change the type of this dataset.");
    }
    // else...
    return true;
  };


  // Adds processing and folder tags
  // tagType will be true for regular tags, false for folder-tags
  var doAddTag = function(serverUrl, datasetIdentifier, tag, tagType, successFunction)
  {
    var url = tagType ? '<%= url_for(:controller => 'datasets', :action => 'add_data_tag') %>' :
                        '<%= url_for(:controller => 'datasets', :action => 'add_data_folder_tag') %>';

    $.ajax({
      type:    'PUT',     // PUT combined with url below triggers "update" action on controller
      url:     url,       // url includes info about what sort of tag will be added
      data:    'dataset[identifier]='  + datasetIdentifier +
               '&dataset[server_url]=' + serverUrl +
               '&tag_val='             + tag,
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
      success: function(data) { successFunction(serverUrl, datasetIdentifier, eval(data)); },
      error:   function(data, status, error) { 
                  ajaxErrorHandler(data, status, error, "Could not add tag!");
               }
    });
  };


  // User adds or removes a tag
  var addTag = function(ctrl)
  {
    var datasetIdentifier = ctrl.data('datasetidentifier');
    var serverUrl         = ctrl.data('serverurl');
    var tag = ctrl.val();

    doAddTag(serverUrl, datasetIdentifier, tag, true, updateTags);
  };


  // User adds or removes a tag
  var addFolderTag = function(ctrl, tag)
  {
    var datasetIdentifier = ctrl.data('datasetidentifier');
    var serverUrl         = ctrl.data('serverurl');

    doAddTag(serverUrl, datasetIdentifier, tag, false, updateFolderTags);
  };


  // tagType will be true for regular tags, false for folder-tags
  var doDeleteTag = function(datasetIdentifier, serverUrl, tagValue, tagType, successFunction)
  {
    $.ajax({
      type:    'PUT',      // PUT combined with url below triggers "update" action on controller
      url:     '<%= url_for(:controller => "datasets", :action => "del_tag") %>',
      data:    'dataset[identifier]='  + datasetIdentifier +
               '&dataset[server_url]=' + serverUrl +
               '&tag_type='            + (tagType ? 'proc' : 'folder') +
               '&tag_val='             + tagValue,
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' /*,
                 'Content-Type': 'application/json' */},
      success: function(data) { successFunction(serverUrl, datasetIdentifier, eval(data)); },
      error:   function(jqXHR, status, error) { 
                  ajaxErrorHandler(jqXHR, status, error, "Could not delete tag!");
               }
    });
  };


  var deleteTag = function(serverUrl, datasetIdentifier, tagValue)
  {
    doDeleteTag(datasetIdentifier, serverUrl, tagValue, true, updateTags);
  };


  var deleteFolderTag = function(serverUrl, datasetIdentifier, tagValue)
  {
    doDeleteTag(datasetIdentifier, serverUrl, tagValue, false, updateFolderTags);
  };


  var makeTagListContainer = function(urlId, contents1, contents2)
  {
    return '<span class="folder-taglist-deletable-' + urlId + ' taglist">' + contents1 + '</span>' +
           '<span class="taglist-deletable-'        + urlId + ' taglist">' + contents2 + '</span>';
  };


  // Generate a tag list for the specified layer
  // regLyr is an object that has tags and folder_tags fields
  var makeTagList = function(layer, regLyr, urlId, placeholder) 
  {
    if(!regLyr)
      return makeTagListContainer(urlId, "", "");    // Layer not registered

    if(!regLyr.tags && !regLyr.folder_tags)
      return makeTagListContainer(urlId, "", "");    // Layer registered, but has no tags

    return makeTagListContainer(urlId,
              createTagList(regLyr.folder_tags, true, layer.serverUrl, layer.identifier, 'folder-tag'),
              createTagList(regLyr.tags,        true, layer.serverUrl, layer.identifier, 'tag'));
  };


  var hideTagEntryField = function(ctrl, selectId)
  {
    ctrl.val('');
    ctrl.hide();
    $('#' + selectId).val(IGNORE_THIS);
  };


  // Gets run when user enters a new folderTag
  var tagManuallyEntered = function(ctrl, selectId) 
  {
    addFolderTag(ctrl, ctrl.val());
    hideTagEntryField(ctrl, selectId);
  };


  // tagEntryFieldName --> This should be some unique identifier (string) for the field
  // layer --> some object that has both an identifier and serverUrl field
  // regLyr --> some object that has tags and folder_tags fields
  var createFolderTagControl = function(layer, tagEntryFieldName, className, enabled)
  {
    var selectId = "input-" + tagEntryFieldName;
    var newTagInputId = INPUT_FIELD_PREFIX + selectId;

    return '<div style="position: relative;display: inline;">' +
             '<input style="display:none;" ' + 
                'id="' + newTagInputId + '" placeholder="Enter a new tag" ' +
                'onchange="tagManuallyEntered($(this), \'' + selectId + '\'); return false;" ' +
                'onblur="hideTagEntryField($(this), \'' + selectId + '\'); return false;" ' +
                'data-serverurl="'         + layer.serverUrl  + '" ' +   
                'data-datasetidentifier="' + layer.identifier + '">' +
             '<select style="float:right" class="add-tag-dropdown-control ' + className + '" ' +
               'data-serverurl="'         + layer.serverUrl  + '" ' +   
               'data-datasetidentifier="' + layer.identifier + '" ' +
               'id="'                     + selectId + '" ' + 
                    (enabled ? '' : 'disabled="true" ') +
               'onchange="folderTagPickerChanged($(this), $(this).val());">' +
                 '<option value = "' + IGNORE_THIS + '">Add Mapping Tag:</option>' + 
                 '<option value = "' + NEW_TAG + '">Create New Tag</option>' +
                 '<% getAliveFolderTags().each do |t| %><option value="<%= t %>"><%= t %></option><% end %>' +
             '</select>' +
           '</div>';
  };


  var TAGS_FOR_PREFIX = 'tags-for-';

  // We can pass in anything for layerInfo as long as it has an identifier and serverURL property
  // layerInfo --> an object that has both an identifier and serverUrl field
  var makeTagPickerControl = function(layerInfo, className, service, enabled)
  {
    return '<select style="float:right" ' + 
             'class="add-tag-dropdown-control ' + 
                     TAGS_FOR_PREFIX + service.toLowerCase() + ' ' + 
                     className + '" ' +
             'data-serverurl="' + layerInfo.serverUrl + '" ' + 
             'data-datasetidentifier="' + layerInfo.identifier + '" ' +
             (enabled ? '' : 'disabled="true" ') +
             'onchange="tagPickerChanged($(this));">' +
               '<option value = "' + IGNORE_THIS + '">Add Processing Tag:</option>' + 
           '</select>';
  };


  var populateTagList = function(service, tagList) 
  {
    $('.' + TAGS_FOR_PREFIX + service.toLowerCase()).append(tagList);
  };


  var populateTagLists = function() 
  {
    populateTagList('WMS', 
        '<% getAliveTags("WMS").each do |t| %><option value="<%= t %>"><%= t %></option><% end %>');

    populateTagList('WFS', 
        '<% getAliveTags("WFS").each do |t| %><option value="<%= t %>"><%= t %></option><% end %>');

    populateTagList('WCS', 
        '<% getAliveTags("WCS").each do |t| %><option value="<%= t %>"><%= t %></option><% end %>');
  };


</script>
