<h1>Register Datasets</h1>

<div id="error-list" class="explanation-problem" style="display: none"></div>

<div class="explanation">
  <p>iGUESS uses datasets stored on remote servers.  To register datasets with the system, enter a server URL in the box below.
  iGUESS will probe the remote server and present you a list of datasets you can register.  In order to use a dataset with
  a module, you will need to tag it with the appropriate tags.  If you want to use the dataset for mapping
  purposes, use the Mapping tag.</p>

  <p>iGUESS will probe for WFS, WCS, and WMS servers at the URL provided below.  Layers offered by the WMS will be available for mapping,
  and layers offered by the WFS/WCS will be available for using as inputs to web processes.</p>
</div>


<div class="url-form">
  <table class="url-form">
      <tr>
      <td>
        <input id="server_url" type="text" name="format" value="" placeholder="Enter data-server URL or select a preset"/>
        <button type="button" id="load_services">Load</button>
      </td>
    </tr><tr>
      <td>
        <select id="url-preset-select"  style="width: 100%">
          <option value="">Select a preset</option>
          <%= raw @current_city.dataserver_url.map { |m| '<option value="' + m.url + '">' + m.url + '</option>' }.join(" ") %>
        </select>
      </td>
    </tr><tr>
    <td colspan=2>
      <a href="#" id="save-preset" onclick="return false;">Save As Preset</a>
      <a href="#" id="delete-preset" onclick="return false;">Delete From Presets</a>
    </td>
    </tr>
  </table>
</div>


<div class="services-display">

  <div class="progress-container">
    <span class="probing" id="probing-wms">Probing WMS server...<span class="loading_indicator"></span></span>
    <span class="probing" id="probing-wfs">Probing WFS server...<span class="loading_indicator"></span></span>
    <span class="probing" id="probing-wcs">Probing WCS server...<span class="loading_indicator"></span></span>
  </div>

  <div class="server-info">
    <div class="server-name" id="server-name"></div>
    <div class="server-descr" id="server-descr"></div>
    <div class="server-owner" id="server-owner"></div>

    <div id="results-display"><!-- Search results will be shown here --></div>
  </div>


  <div class="infotable" id="infotable-unavailable-for-mapping">
    <h1 class="dataset-title">Available for mapping</h1>
      <div>
        We do all our mapping using <%= GoogleProjection %>, which is compatible with Google Maps and OpenStreetMap, 
        used as a background in the map window.  If a dataset is available from a WMS service, and is in this projection, 
        then we can display it on our maps.
      </div>
      <br>
    <h1 class="dataset-title">Available for processing</h1>
    <div>
      Each city defines a projection that will be used for all calculations.  For <%= @current_city.name %>, 
      that is <%= @current_city.srs %>.  If a dataset is available from a WFS or WCS server, and is in this projection, 
      then we can use it in the computation modules.
    </div>
  </div>


<%= render :partial => 'tag_functions.html.erb' %>

<script>

  // Add "js" style to body -- makes fancy checkboxes work
  $('body').attr("class",$('body').attr("class") + " js");

  GOOGLE_SRS = '<%= GoogleProjection %>';


  // registeredDataLayers is a list of info about all layers registered with the system.  It gets
  // populated both when the page is built by rails, and then modified as layers are added and
  // removed with the Register button.

  // Note that Dataset overrides to_json to make this work nicely
  var registeredDataLayers = <%= raw buildRegisteredDataLayersJson(@datasets) %>;


  var makeRegisteredLayer = function(serverUrl, data, configCount) 
  {

    if(registeredDataLayers[serverUrl] === undefined)
      registeredDataLayers[serverUrl] = {};

    // Important: Keys here MUST be the same as those generated by Rails in the 
    // "var registerdDataLayers" line above
    registeredDataLayers[serverUrl][data.dataset.id] = {
      tags:        data.tags,
      folder_tags: data.folder_tags,    
      configCount: configCount
    };
  };


  LOCAL_SRS = '<%= @current_city.srs %>';


  var getLayerNameFromCheckboxId = function(id)
  {
  	return id.substring('registered_'.length);	// Remove 'registered_' from the front of the string
  };



  var wfsProcessingComplete = 0;
  var wmsProcessingComplete = 0;
  var wcsProcessingComplete = 0;  


  var resetServiceLoadedStatus = function() {
    wfsProcessingComplete = 0;
    wmsProcessingComplete = 0;
    wcsProcessingComplete = 0;
  };


  // Called when we've gotten whatever response we're going to get from the server in question
  // i.e. when a WFS response arrives.  More responses might be coming (from WMS, and WCS, for example).
  // serverInfo could be null.
  var doneProcessing = function(url, type, serverInfo) 
  {
    if(type == "WFS") {
      wfsProcessingComplete++;
      $("#probing-wfs").hide();
    }
    else if(type == "WMS") {
      wmsProcessingComplete++;
      $("#probing-wms").hide();
    }
    else if(type == "WCS") {
      wcsProcessingComplete++;
      if(wcsProcessingComplete == 2)
        $("#probing-wcs").hide();
    }
    else { alert("Unknown service type " + type); }

    if(serverInfo)
      displayServerDetails(serverInfo, type);   // Display this as it comes in

    // Make sure we've heard from all services before continuing
    if(wfsProcessingComplete != 1 || wmsProcessingComplete != 1 || wcsProcessingComplete != 2)  
      return; 

    $(".progress-container").hide();
    displayServices();
  };


  // We can have bouding box info socked away in several different places, depending on which service sent it,
  // and which openLayers component processed it.  We'll break this out to avoid complexity in the calling function.
  // Returns null if we can't find any good bounding box coords.
  var getNormalizedBoundingBox = function(layer)
  {
    if(layer.wmsCrs && layer.mapBbox && layer.mapBbox.left)
      return [layer.mapBbox.left, 
              layer.mapBbox.bottom, 
              layer.mapBbox.right, 
              layer.mapBbox.top, 
              layer.wmsCrs];


    if(layer.wmsCrs && layer.mapBbox && layer.mapBbox.bbox)   
      return [layer.mapBbox.bbox[0], 
              layer.mapBbox.bbox[1], 
              layer.mapBbox.bbox[2], 
              layer.mapBbox.bbox[3], 
              layer.wmsCrs];


    if(layer.wmsCrs && layer.mapBbox && layer.mapBbox.length == 4)
      return [layer.mapBbox[0], 
              layer.mapBbox[1], 
              layer.mapBbox[2], 
              layer.mapBbox[3], 
              layer.wmsCrs];

    
    // See if we can do this in lat/long -- this is very hacky
    if(layer.llbbox && layer.llbbox.length == 4) 
      return [layer.llbbox[0], 
              layer.llbbox[1], 
              layer.llbbox[2], 
              layer.llbbox[3], 
              'EPSG:4326'];

    return null;
  };


  var WMSTagList = '<% getAliveTags("WMS").each do |t| %><option value="<%= t %>"><%= t %></option><% end %>';
  var WFSTagList = '<% getAliveTags("WFS").each do |t| %><option value="<%= t %>"><%= t %></option><% end %>';
  var WCSTagList = '<% getAliveTags("WCS").each do |t| %><option value="<%= t %>"><%= t %></option><% end %>';



  // Popup a window for displaying the passed content
  var displayOverflow = function(content)
  {
    var win = window.open("", "", "width=600, height=400, scrollbars=yes");
    if(win)
    {
      $(win.document.body).html(content);
      return;
    }
    alert("Can't open new window. Please change your browser settings to allow popups from this site.");
  };


  var getCrsListDisplay = function(crsList, maxLen)
  {
    var len = typeof(crsList) == "string" ? 0 : crsList.length;
    var itemCount = len;

    if(itemCount > maxLen)
      itemCount = maxLen;

    var html = "<span>";

    html += (typeof(crsList) == "string" ? crsList : crsList.slice(0, itemCount - 1).join('; '));

    // Set up overflow for long lists
    if(len > itemCount)
    {
      html += " <a href='#' onclick='displayOverflow(\"Full list of CRSs supported for this dataset:<br>" +
               crsList.join('; ') +  "\");return false;'>More &gt;&gt;</a>";
    }

    html += "</span>";
    return html;
  };


  var onFolderTagEntryChanged = function(field) 
  { 
    var words = field.value.split(" ");
    if(words.length > 0 && words[words.length - 1] === "") {
      addFolderTagXXX(field.name, words[words.length - 2], false);
      field.value = "";
    }

    else if(words.length > 0 && words[words.length - 1] !== "")
      findMatchingTags(words[words.length - 1], field.name);
    else
      showTagMatches(field.name, "");
  }


  var displayServices = function() 
  {
    var mapId = 0;
    var first = true;

    var layerCount = Object.keys(discoveredLayers).length;

    // If no layers were loaded, show an intelligble error message and bail
    if(layerCount == 0) {
      $("#results-display").html('<div class="error-header">Please check the number and dial again</div>' +
                                 '<div class="error-body">No data layers could be found on the specified server.<br>' +
                                 'Either the URL is not that of a WMS/WFS/WCS data server, or the server is not responding.' +
                                 '</div>');

      $(".server-info").show();

      return;
    };


    var tagEntryFieldNameCounter = 0;


    // Generate a tag list for the specified layer
    var makeTagList = function(layer, regLyr, urlId, placeholder) 
    {
      if(!regLyr)
        return placeholder;

      if(!regLyr.tags && !regLyr.tags)
        return placeholder;

      return '<span class="folder-taglist-deletable-' + urlId + ' taglist">' + 
               createTagList(regLyr.folder_tags, true, layer.serverUrl, 
                             layer.identifier, 'folder-tag') +
             '</span>' +
     
             '<span class="taglist-deletable-' + urlId + ' taglist">' + 
               createTagList(regLyr.tags, true, layer.serverUrl, 
                             layer.identifier, 'tag') +
             '</span>';
    };


    // We have layers!!!

    $("#results-display").html("");   // Clear the decks

    // These refer to the layers that have been discovered on the remote servers
    var discoveredLayerKeys = Object.keys(discoveredLayers).sort();
    // discoveredLayers.sort(datasetSort);


    // Render found datasets in two passes -- first for registered items, second for unregistered ones.
    // This puts registered items at the top of the screen.
    for(var pass = 0; pass < 2; pass++)
    {
      for(var lyrctr = 0, len = discoveredLayerKeys.length; lyrctr < len; lyrctr++)
      {
        var urlId = discoveredLayerKeys[lyrctr];
        var layer = discoveredLayers[urlId];      

        // if(registeredDataLayers[layer.serverUrl] == undefined) {
        //   // No already-registered layers for this url.. Put something here so the following lines won't crash.
        //   registeredDataLayers[layer.serverUrl] = {};
        // }

        var regLyr = registeredDataLayers[layer.serverUrl] && 
                     registeredDataLayers[layer.serverUrl][layer.identifier];

        if((pass == 0 && !regLyr) || (pass == 1 && regLyr)) { continue; }

        if(first) {
          $("#results-display").html("<div>Server has <span id='results-display-count'></span> layers.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" +
                                     "<span class='proj-list'>SRS required for processing: <span>" + LOCAL_SRS + "</span></span>; " +
                                     "<span class='proj-list'>SRS required for mapping: <span>" + GOOGLE_SRS + ".</span></span></div><ul id='layer-table'></ul>");
          first = false;
        }

        var mapDivId = "map" + mapId++;

        var availableInLocalProjection  = false;
        var availableInGoogleProjection = false;

        if(layer.srs !== null) {
          availableInLocalProjection  = CRS.hasCRS(layer.dataCrs,    LOCAL_SRS);
          availableInGoogleProjection = CRS.hasCRS(layer.wmsCrsList, GOOGLE_SRS);
        }

        var titleNode = $(document.createElement("div"));
        titleNode.html("<span class='dataset_title' id='dataset-title-" + layer.identifier + "'>" + 
                          (layer.title != "" ? layer.title : layer.identifier) + 
                       "</span>" + 
                       "<span class='dataset-identifier'>Identifier: <span>" + layer.identifier + "</span>");


        var servicesAvailNode = $(document.createElement("div"));
        servicesAvailNode.attr({ class:"dataset_services_available" });
        servicesAvailNode.text("Services: " + layer.type.join(', '));

        if(regLyr) {  
          servicesAvailNode.append("<br>Used in " + regLyr.configCount + " configurations");
        }

        var abstractNode = "";

        if(layer.abstract) {
          abstractNode = $(document.createElement('div'));
          abstractNode.attr({ class:"dataset_abstract", id:"dataset-abstract-" + layer.identifier });
          abstractNode.html(linkify(layer.abstract));
        }

        var srsNode = $(document.createElement("div"));
        srsNode.attr({ class:"dataset_srs" });

        var code = 
          '<div style="cursor:pointer" rel="#infotable-unavailable-for-mapping">' +
          '<span class="proj-background">available for mapping</span><span class="' + 
              (availableInGoogleProjection ? 'yes-background' : 'no-background') + '">' + 
              (availableInGoogleProjection ? 'yes'            : 'no')     + '</span>' +
          '</div>' +

          '<div style="cursor:pointer" rel="#infotable-unavailable-for-mapping">' +
          '<span class="proj-background">available for processing</span><span class="' + 
              (availableInLocalProjection  ? 'yes-background' : 'no-background') + '">' + 
              (availableInLocalProjection  ? 'yes'            : 'no')     + '</span>' +
          '</div>' +
          '<br><br><br>';

        srsNode.append(code);


        var data_info = $(document.createElement('div'));
        var tagPickerControlId = 'data-type-' + layer.identifier;
        
        var tagEntryFieldName = "tagEntry" + tagEntryFieldNameCounter;
        tagEntryFieldNameCounter++;

        data_info.attr({ class:'data-info' });

        data_info.append(srsNode)
                 .append(getRegisterControlHtml(layer.identifier, regLyr))
                 .append(servicesAvailNode)
.append('<span name="matches-' + tagEntryFieldName + '" id="matches-' + tagEntryFieldName + '"></span>')
                 .append('<div class="tag-control">' +
                            makeTagList(layer, regLyr, urlId, "No tags") +
                            '<div class="fake-input">' +
                              '<span name="tags-' + tagEntryFieldName + '" id="tags-' + tagEntryFieldName + '"></span>' +
                              '<input class="invisible" name = "' + tagEntryFieldName + '" ' +
                              'onkeyup="onFolderTagEntryChanged(this);">' +
                            '</div>' +
                            makeTagPickerControl(layer, tagPickerControlId, regLyr) + 
                         '</div>');

        var sample_map = $(document.createElement("div"));
        sample_map.attr({ id:mapDivId, class:"sample-map" });   // Map will be rendered based on div's id


        var container = $(document.createElement("div"));
        container.attr({ class:"dataset" });
        container.append(titleNode)
                 .append(abstractNode)
                 .append(data_info)
                 .append(sample_map);


        var crsInfo = "<div>";

        if(layer.wmsCrsList && layer.wmsCrsList.length > 0)
          crsInfo += "<div class='proj-list'>Mapping Projections: " + 
                        getCrsListDisplay(layer.wmsCrsList, 5) + 
                     "</div>";            

        if(layer.dataCrs)
          crsInfo += "<div class='proj-list'>Processing Projections: " + 
                        getCrsListDisplay(layer.dataCrs, 5) +
                     "</div>";

        crsInfo += "</div>";

        container.append(crsInfo);

        // li_element (map-data-item)
        //    container (regLyr_dataset or unregLyr_dataset)
        //       data_info
        //       sample_map


        var li_element = $(document.createElement("li"));
        li_element.attr({ class:"map-data-item " + (regLyr ? "registered_dataset" : "unregistered_dataset") });
        li_element.append(container);

        $("#layer-table").append(li_element);

        var bb = getNormalizedBoundingBox(layer);   // Returns an array, or null if we can't figure out what to do

        if(!bb) {
          // I suspect that layer.type.hasObject('WMS') will always be false here...
          $('#' + mapDivId).html(
                '<div class="map-unavailable">' + 
                (layer.type.hasObject('WMS') ? 'Map unavailable' : 'No WMS service for this layer') + 
                '</div>'
              );

          if(!alreadyShownWmsError) {
            var err = '<div>We cannot display sample maps for some datasets on this server.  ' +
                      'The most likely cause of this problem is that the server\'s WMS functionality is not properly configured: ' +
                      'either a WMS service has not been defined for a particular identifier, or I cannot get a usable bounding box ' +
                      'for the layers you have requested.<P><P>You can see how the server responds to WMS queries by clicking here: ' + 
                      '<a href="'+ WMS.getCapReq(layer.serverUrl) + '" target="_blank">WMS GetCapabilities</a></div>';

            $('#error-list').append(err).slideDown(500);

            alreadyShownWmsError = true;    // Only show error message once, to avoid flooding the error display
            }
        }
        else {
          var bounds = new OpenLayers.Bounds(bb[0], bb[1], bb[2], bb[3], bb[4]);  //minx miny maxx maxy

          var miniMap = new OpenLayers.Map({
                  maxExtent:  bounds,
                  projection: new OpenLayers.Projection(bb[4]),
                  controls: [ new OpenLayers.Control.NavToolbar({zoomWheelEnabled: true}) ]
          });

          var lyr = new OpenLayers.Layer.WMS(
                  layer.title,
                  getServerUrl(),
                  { layers:  layer.identifier,
                    format:  "image/gif" 
                  }
          );

          miniMap.addLayer(lyr);
          miniMap.zoomToMaxExtent();
          miniMap.render(mapDivId);    // Renders to <div id="map#">
        }
        
        // Now that the tag picker has finally been added to the dom, we can populate it.
        // If there is no dataBbox, we don't want the Area of Interest tag.
        // WFSTagList and WCSTagList are basically the same, except WFSTagList also has the AOI tag.
        // This is kind of hacky, but seems to work.
        if(layer.type.hasObject('WCS') || (layer.type.hasObject('WFS') && getCoord(layer, "left") === "")) {
          makeDropdown(tagPickerControlId, WCSTagList);
        }
        else if(layer.type.hasObject('WFS')) {
          makeDropdown(tagPickerControlId, WFSTagList);
        }
        else
          makeDropdown(tagPickerControlId, WMSTagList);
      }  // end for loop
    }  // for pass = 0 to 2

    addDeleteTagClickHander(true);    // Add delete click handler for processing tags
    addDeleteTagClickHander(false);   // Add delete click handler for folder tags
    addSwitchboxHandler();


    $('div[rel]').overlay();  // Activate availability status overlays
    $("#results-display-count").text(discoveredLayerKeys.length);    // Update layer display


    // This gets called when the ajax request to the server returns with a success message
    var registeredDataset = function(data, serverUrl, datasetIdentifier, checkbox, tagPickerControl, item)
    {
        $(".taglist-deletable-" + urlId).attr("disabled", false);
        $(".folder-taglist-deletable-" + urlId).attr("disabled", false);

        // Add layer to the list of registered layers
        makeRegisteredLayer(serverUrl, data, 0);
        updateTags(serverUrl, data.dataset.identifier, data.tags);
        updateFolderTags(serverUrl, data.dataset.identifier, data.folder_tags);

        onDatasetRegisteredOrUnregistered(item, checkbox, tagPickerControl, true);
    }


    var disableTagItems = function(urlId, attr) {
      $(".taglist-deletable-"        + urlId + " ." + attr, 
        ".folder-taglist-deletable-" + urlId + " ." + attr).attr("disabled", true);

      $(".taglist-deletable-"        + urlId + " ." + attr,
        ".folder-taglist-deletable-" + urlId + " ." + attr).off("click");   // Disable clicking
    };


    var unregisteredDataset = function(serverUrl, datasetIdentifier, checkbox, tagPickerControl, item)
    {
      // Remove layer from the list of registered layers
      delete registeredDataLayers[serverUrl][datasetIdentifier];

      var urlId = cssEscape(serverUrl + datasetIdentifier);

      disableTagItems(urlId, "tag-delete-button");
      disableTagItems(urlId, "folder-tag-delete-button");

      $(".taglist-deletable-"        + urlId + " .tag", 
        ".folder-taglist-deletable-" + urlId + " .tag").attr("disabled", true);

      $(".taglist-deletable-"        + urlId,
        ".folder-taglist-deletable-" + urlId)          .attr("disabled", true);

      onDatasetRegisteredOrUnregistered(item, checkbox, tagPickerControl, false);
    };


    // Common code to run when we regiester or unregister a dataset
    var onDatasetRegisteredOrUnregistered = function(item, checkbox, tagPickerControl, registering)
    {
      item.toggleClass("checked");

      // Make div red or green
      item.parent().parent().parent().toggleClass("registered_dataset");
      item.parent().parent().parent().toggleClass("unregistered_dataset");

      checkbox.checked = registering;
      tagPickerControl.disabled = !registering;
    };


    // When the toggle switch is clicked, check off / de-select the associated checkbox
    // Want to find this when we search for "registered_"
    $(".toggle").click(function(e) 
    {
      var checkboxID        = $(this).attr("ref");
      var checkbox          = document.getElementById(checkboxID);
      var datasetIdentifier = getLayerNameFromCheckboxId(checkboxID);
      
      var tagPickerControl  = document.getElementById('data-type-' + datasetIdentifier);
      var serverUrl         = getServerUrl();

      var configCount = (registeredDataLayers[serverUrl] && 
                         registeredDataLayers[serverUrl][datasetIdentifier])  ?
                              registeredDataLayers[serverUrl][datasetIdentifier].configCount : 0;

      // When unregistering a data layer that is used in a configuration, show a warning
      if(configCount > 0) {
        var c =  (configCount == 1) ? "configuration" : "configurations";
        var t =  (configCount == 1) ? "this"          : "these";
        var th = (configCount == 1) ? "it"            : "them";

        if(!confirm("This dataset is in use by " + configCount + " " + c + ". " +
                    "Unregistering it will cause it to be removed from " + t + " " + c + ".\n\n" +
                    "Click OK if you are sure you want to unregister this dataset.")) {
          e.preventDefault();
          return;
        }
      }

      var urlId = cssEscape(serverUrl + datasetIdentifier);

      var thiiis = $(this);   // Remember "this" for when the ajax requests return

      if(checkbox.checked) {
        // ===== Unregister dataset =====

        // Let the server know this layer is no longer registered -- to do this we delete the corresponding
        // record in the datasets table.
        $.ajax({
          type: "DELETE",      // DELETE combined with url below triggers "destroy_by_params" action on controller
          url: '<%= url_for(:controller=>:datasets, :action=>:destroy_by_params) %>',
          data: "dataset[identifier]="  + datasetIdentifier +
                "&dataset[server_url]=" + serverUrl,

          headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
          // http://api.jquery.com/jQuery.ajax/
          success: function(data, status, jqXHR)  { 
              unregisteredDataset(serverUrl, datasetIdentifier, checkbox, tagPickerControl, thiiis); 
            },
          error: function(jqXHR, status, error) {
              jsonErrorHandler(jqXHR, status, error, "Could not unregister dataset!");
            }
        });

      } else {
        // ===== Register dataset =====

        var layer          = discoveredLayers[urlId];
        var taglist        = extractTagList(serverUrl, datasetIdentifier);
        var folderTagList  = extractFolderTagList(serverUrl, datasetIdentifier);
        var sanitizedIdent = sanitizeForCss(datasetIdentifier)
        var title          = $("#dataset-title-"    + sanitizedIdent).text();
        var abstract       = $("#dataset-abstract-" + sanitizedIdent).text();


        var service  = "";
        if(     layer.type.hasObject("WFS")) { service = "WFS"; }
        else if(layer.type.hasObject("WCS")) { service = "WCS"; }
        else if(layer.type.hasObject("WMS")) { service = "WMS"; }

        // Let the server know this layer is now registered -- to do this we must create a new record in
        // our datasets table.
        $.ajax({
          type: "POST",      // POST combined with url below triggers "create" action on controller
          url: "<%= url_for(:controller=>:datasets, :action=>:create, :format=>:json) %>",
          data: "dataset[identifier]="       + datasetIdentifier +
                "&dataset[service]="         + service +
                "&dataset[server_url]="      + serverUrl +
                "&dataset[title]="           + encodeURIComponent(title) +
                "&dataset[abstract]="        + encodeURIComponent(abstract) +
                "&dataset[bbox_left]="       + getCoord(layer, "left") +
                "&dataset[bbox_right]="      + getCoord(layer, "right") +
                "&dataset[bbox_top]="        + getCoord(layer, "top") +
                "&dataset[bbox_bottom]="     + getCoord(layer, "bottom") +
                "&dataset[resolution_x]="    + (layer.resolution ? Math.abs(layer.resolution.x) : 0) +
                "&dataset[resolution_y]="    + (layer.resolution ? Math.abs(layer.resolution.y) : 0) +
                "&dataset[format]="          + (layer.format ? layer.format : "") +
                "&dataset[local_srs]="       + (CRS.hasCRS(layer.dataCrs, LOCAL_SRS) ? "true" : "false") +
                "&dataset[city_id]="         + "<%= raw @current_city.id %>" +
                "&dataset[alive]=true"       +

                "&llbbox="                   + layer.llbbox +
                "&server_title="             + getServerTitle() +
                "&server_abstract="          + getServerAbstract() +
                "&tags="                     + taglist +
                "&folder_tags="              + folderTagList,

          headers: { "X-CSRF-Token": "<%= form_authenticity_token.to_s %>" },
          success: function(data, status, jqXHR)  { 
              registeredDataset(data, serverUrl, datasetIdentifier, checkbox, tagPickerControl, thiiis); 
            },
          error: function(jqXHR, textStatus, error) { 
                 jsonErrorHandler(jqXHR, status, error, "Could not register dataset!");
                }
        });
      }

      e.preventDefault();

    });  // end toggle state change handler

    
    // Because of our unusual layout, we need to manually adjust things to get equal tile sizes... lame!
    equalizeRowHeights();
    $('#layer-table').equalWidths();
  };


  // which == "left", "right", "top", or "bottom"
  var getCoord = function(layer, which)
  {
    if(layer.dataBbox)
      return doGetCoord(layer.dataBbox, which);

    if(layer.mapBbox)
      return doGetCoord(layer.mapBbox, which);

    return "";
  };


  // Helper for above
  // Handles both types of bounding boxes... either a simple array, or a dictionary with left/right/top/bottom keys
  var doGetCoord = function(obj, which) 
  {
    if(obj[which])
      return obj[which];

    if(which == "left")
      return obj[0];
    if(which == "right")
      return obj[2];
    if(which == "top")
      return obj[3];
    if(which == "bottom")
      return obj[1];
  };


  var makeDropdown = function(controlId, tagList) {
    $('#' + sanitizeForCss(controlId)).append(tagList);
  }


   // If readyToPoulate is false, we can pass in anything for layer as long as it has an identifier property
  var makeTagPickerControl = function(layer, controlId, enabled)
  {
    return '<select style="float:right" class="add-tag-dropdown-control" ' + 
           'data-serverurl="' + layer.serverUrl + '" ' +   // These keys seem to get lowercased anyway... so no upper case letter pls!
           'data-datasetidentifier="' + layer.identifier + '" ' +
           'id="' + controlId + '" ' + (enabled ? '' : 'disabled="true" ') +
           'onchange="tagPickerChanged($(this));">' +
             '<option value = "Ignore This">Add Processing Tag:</option>' + 
           '</select>';
  }


  var extractTagList = function(serverUrl, datasetIdentifier) 
  {
    var urlId = cssEscape(serverUrl + datasetIdentifier);

    var tags = [];


    $('.taglist-deletable-' + urlId).children().each(function() {
        tags.push($(this).text());
    });

    return tags;
  };


  var extractFolderTagList = function(serverUrl, datasetIdentifier) 
  {
    var urlId = cssEscape(serverUrl + datasetIdentifier);

    var tags = [];


    $('.folder-taglist-deletable-' + urlId).children().each(function() {
        tags.push($(this).text());
    });

    return tags;
  };


  // Save current value of text box to database
  var savePreset = function()
  {
    var url = getServerUrl();
    $.ajax({
      type: 'POST',      // POST combined with url below triggers "create" action on controller
      url: '<%= url_for(:controller => 'dataserver_url', :action => 'create', :format=>:json) %>',
      data: 'city[id]=' + <%= @current_city.id %> +
            '&url=' + url,
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' /*,
                 'Content-Type': 'application/json' */},
      success: function(data) { 
        $('#url-preset-select').append('<option value="' + url + '">' + url + '</option>');
        updateButtonVisibility();
      }
    });
  };


  // Delete current value of text box to database
  var deletePreset = function()
  {
    if(!confirm('Do really want to permanently delete this preset?'))
      return;

    var url = getServerUrl();
    $.ajax({
      type: 'DELETE',      // DELETE combined with url below triggers "destroy" action on controller
      url: '<%= url_for(:controller => 'dataserver_url', :action => 'destroy', :format=>:json) %>',
      data: 'city[id]=' + <%= @current_city.id %> +
            '&url=' + url,
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' /*,
                 'Content-Type': 'application/json' */},
      success: function(data) { 
        $('#url-preset-select option[value="' + url + '"]').remove();   // Delete the option
        $('#server_url').val('');                                       // Clear the input box
        updateButtonVisibility();
      },
      failure: function(data) { alert("Cound not delete preset!" + data); }
    });
  };


  var hideProbingIndicators = function() 
  {
    $("#probing-wms").hide();
    $("#probing-wfs").hide();
    $("#probing-wcs").hide();
    $(".progress-container").hide();
  };


  var showProbingIndicators = function() 
  {
    $("#probing-wfs").show();
    $("#probing-wms").show();
    $("#probing-wcs").show();

    $(".progress-container").show();
  };



  var getServerTitle = function()
  {
    return $("#server-name").text();
  }


  var getServerAbstract = function()
  {
    return $("#server-descr").text();
  }


  $().ready(function(){
    onLoadServicesPageReady();
  });



  // Adapted from http://css-tricks.com/equal-height-blocks-in-rows/
  var currentTallest = 0,
      currentRowStart = 0,
      rowDivs = new Array();

  var setConformingHeight = function(el, newHeight) {
     // set the height to something new, but remember the original height in case things change
     el.data("originalHeight", (el.data("originalHeight") == undefined) ? (el.height()) : (el.data("originalHeight")));
     el.height(newHeight);
  }

  var getOriginalHeight = function(el) {
     // if the height has changed, send the originalHeight
     return (el.data("originalHeight") == undefined) ? (el.height()) : (el.data("originalHeight"));
  }

  var equalizeRowHeights = function() {

     // Find the tallest LI in the row, and set the heights of all of the LIs to match it
     $('li.map-data-item').each(function() {
        // "caching"
        var $el = $(this);
        
        var topPosition = $el.position().top;

        if (currentRowStart != topPosition) {

           // We just came to a new row.  Set all the heights on the completed row.
           for(currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) setConformingHeight(rowDivs[currentDiv], currentTallest);

           // Set the variables for the new row
           rowDivs.length = 0; // empty the array
           currentRowStart = topPosition;
           currentTallest = getOriginalHeight($el);
           rowDivs.push($el);

        } else {

           // Another div on the current row.  Add it to the list and check if it's taller.
           rowDivs.push($el);
           currentTallest = (currentTallest < getOriginalHeight($el)) ? (getOriginalHeight($el)) : (currentTallest);

        }
        // Do the last row
        for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) setConformingHeight(rowDivs[currentDiv], currentTallest);

     });

  }

  // Recalc heights if window size changes
  $(window).resize(function() {
     equalizeRowHeights();
  });


  // Basic dataset object -- this is what we track for datasets seen on remote server
  // Used for discoveredLayers
  var Dataset = function(serverUrl, datasetInfo) 
  {
    this.serverUrl = serverUrl;

    if(datasetInfo) {
      this.identifier  = datasetInfo.name  || datasetInfo.identifier;
      this.title       = datasetInfo.title || this.identifier;
      this["abstract"] = datasetInfo.abstract;    // abstract is a js reserved word!
    } else {
      this.identifier  = ""; 
      this.title       = ""; 
      this["abstract"] = "";    // abstract is a js reserved word!
    }
  };


  var WMSDataset = function(serverUrl, datasetInfo)
  {
    Dataset.call(this, serverUrl, datasetInfo);

    this.type = ["WMS"];

    this.wmsCrs      = null;
    this.wmsCrsList  = [];      // CRSs that the map data is available in
    this.mapBbox     = null;    // Projected bounds of the map
    this.llbbox      = null;    // Lat-long bounds of the WCS dataset, or if not that, then the map

    var localCrs = CRS.getSimpleFormat(LOCAL_SRS);

    // datasetInfo.srs[xxx] == true  ==> if this exists, the we can use localCrs
    this.wmsCrs  = datasetInfo.srs[localCrs]  && localCrs;

    for(var key in datasetInfo.srs)
      this.wmsCrsList.push(key);

    this.mapBbox = datasetInfo.bbox[localCrs] && datasetInfo.bbox[localCrs].bbox;
    this.llbbox  = datasetInfo.llbbox;
  };
  WMSDataset.prototype = new Dataset;
  WMSDataset.prototype.constructor = WMSDataset; // repair the inherited constructor


  var WFSDataset = function(serverUrl, datasetInfo)
  {
    Dataset.call(this, serverUrl, datasetInfo);

    this.type = ["WFS"];

    this.dataCrs     = null;    // CRSs that the data is available in (will be a list)
    this.dataBbox    = null;    // Projected bounds of the WFS dataset, if any

    this.dataCrs  = datasetInfo.srs || (datasetInfo.supportedCRS  && datasetInfo.supportedCRS[0]) ||
                                       (datasetInfo.supportedCRSs && datasetInfo.supportedCRSs[0]);

    // With WFS, latLongBoundingBox is really a projected bbox... the name is misleading.  Thouugh on some
    // servers, it is misimpelmented, and we will get a real lat-long bbox here.  In those cases... well...
    // the data will be bogus.  Garbage in, garbage out.
    this.dataBbox = datasetInfo.latLongBoundingBox;  
  };
  WFSDataset.prototype = new Dataset;
  WFSDataset.prototype.constructor = WFSDataset; // repair the inherited constructor


  var WCSDataset = function(serverUrl, datasetInfo)
  {
    Dataset.call(this, serverUrl, datasetInfo);

    this.type = ["WCS"];

    this.dataCrs     = null;    // CRSs that the data is available in (will be a list)
    this.llbbox      = null;    // Lat-long bounds of the WCS dataset, or if not that, then the map
    this.format      = null;    // Image format for WCS data
    this.resolution  = null;    // Resolution of the WCS dataset

    // If the WCS data is hosted in a projection other than our computing projection, then
    // the projected bounding box provided will be bogus.  Instead, we'll collect the lat-long 
    // bounding box, and project it on the server before storing it in the database.  We don't
    // need the WCS bounding box on the client at this time.
    if(datasetInfo.bounds) 
      this.llbbox = datasetInfo.bounds;
    
    this.dataCrs  = datasetInfo.srs || (datasetInfo.supportedCRS  && datasetInfo.supportedCRS[0]) ||
                                       (datasetInfo.supportedCRSs && datasetInfo.supportedCRSs[0]);
    try {
      // Use image/img if it is available... seems to work best
      if(datasetInfo.supportedFormats.hasObject("image/img"))
        this.format = "image/img";
      else if(datasetInfo.supportedFormats.hasObject("image/tiff"))
        this.format = "image/tiff";
      else
        this.format = datasetInfo.supportedFormats[0];
    } catch(error) {
      // Do nothing
    }

    if(datasetInfo.domain && 
      datasetInfo.domain.spatialDomain && 
      datasetInfo.domain.spatialDomain.gridCRS && 
      datasetInfo.domain.spatialDomain.gridCRS.gridOffsets)
    {
      this.resolution = datasetInfo.domain.spatialDomain.gridCRS.gridOffsets;
    }
  };
  WCSDataset.prototype = new Dataset;
  WCSDataset.prototype.constructor = WCSDataset; // repair the inherited constructor


  // Gets run on any layer found, registered or not; dataset is a Dataset object
  // Merges dataset into the already created layer record, if it exists
  var mergeDatasetIntoLayerList = function(dataset, service)
  {
    // Need a single key to make iteration elsewhere easier
    var key = cssEscape(dataset.serverUrl + dataset.identifier);   

    var layer = discoveredLayers[key];

    // It's a new layer, add it to discoveredLayers without further ado
    if(!layer) {   
      discoveredLayers[key] = dataset;
      layer = dataset;

    }

    else {   // Already found this layer, add service to it

      // We'll get here twice with service == WCS; we don't want to list it twice in layer.type
      // layer.type is a list of strings: "WCS", "WFS", and/or "WMS"
      if(!layer.type.hasObject(service))
        layer.type.push(service);

      if(service == "WFS") {
        layer.dataCrs  = dataset.dataCrs;
        layer.dataBbox = dataset.dataBbox;
      }
      else if(service == "WCS") {
        layer.dataCrs  = dataset.dataCrs;
        layer.llbbox   = dataset.llbbox;
        layer.format   = dataset.format;

        if(dataset.resolution)
          layer.resolution = dataset.resolution;
      }

      else if(service == "WMS")
      {
        layer.wmsCrs      = dataset.wmsCrs;
        layer.wmsCrsList  = dataset.wmsCrsList
        layer.mapBbox     = dataset.mapBbox;
        
        // If we already have an llbbox from WCS, don't clobber it
        if(!layer.llbbox)
          layer.llbbox    = dataset.llbbox;

        // Title and abstract from WMS supercede those from other services
        layer.title       = dataset.title;         
        layer["abstract"] = dataset["abstract"];
      }
    }
  };


  // Tracks data about a server that we might want to display on the page
  var ServerInfo = function(title, abstract, owner)
  {
    this.title    = title;
    this.abstract = abstract;
    this.owner    = owner;
  };


  // Try to determine if capabilities represents an error or other negative response
  var isError = function(capabilities)
  {
    if(capabilities.error && capabilities.error.exceptionReport) {
      console.log("Error: ", capabilities);
      return true;
    }

    return false;
  };


  var processIncomingWMSLayers = function(capabilities, serverUrl)
  {
    if(!isError(capabilities)) {

      for(var i = 0, len = capabilities.capability.layers.length; i < len; i++)
      {
        var dataset = new WMSDataset(serverUrl, capabilities.capability.layers[i]);

        mergeDatasetIntoLayerList(dataset, "WMS");
      }

      var owner = "";

      if(capabilities.service && 
         capabilities.service.contactInformation && 
         capabilities.service.contactInformation.personPrimary &&
         capabilities.service.contactInformation.personPrimary.organization)
      {
        owner = capabilities.service.contactInformation.personPrimary.organization;
      }

      var serverInfo = new ServerInfo(capabilities.service.title, 
                                      capabilities.service["abstract"],
                                      owner);
    }

    doneProcessing(serverUrl, "WMS", serverInfo);
  };


  var processIncomingWFSLayers = function(capabilities, serverUrl)
  {
    for(var i = 0, len = capabilities.featureTypeList.featureTypes.length; i < len; i++)
    {
      var dataset = new WFSDataset(serverUrl, capabilities.featureTypeList.featureTypes[i]);

      mergeDatasetIntoLayerList(dataset, "WFS");
    }

    // WFS 1.0.0 seems not to return server owner details
    var serverInfo = new ServerInfo(capabilities.service.title, 
                                    capabilities.service["abstract"]);

    doneProcessing(serverUrl, "WFS", serverInfo);
  };


  // Class declaration -- maintain same public interface as ServiceProbe on register WPS server page
  // :::constructor:::
  var ServiceProbe = function(serverUrl) 
  {   
    this.serverUrl = serverUrl;
    var self       = this;    // Stored pointer to ourselves, will be needed in the callback
  

    // :::public:::
    this.startProbing = function() 
    { 
      WMS.getCapabilities(self.serverUrl,  self.onWmsGetCapabilitiesSucceeded);
      WFS.getCapabilities(self.serverUrl,  self.onWfsGetCapabilitiesSucceeded);
      // Launch both GetCapabilities and DescribeCoverage requests:
      WCS.getCapabilities(self.serverUrl,  self.onWcsGetCapabilitiesSucceeded);   
    };

    // :::private:::
    // TODO: If capabilities is undefined, there was a problem somewhere... it should be logged
    this.onWfsGetCapabilitiesSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WFS", response, capabilities))
        processIncomingWFSLayers(capabilities, self.serverUrl);
      else    // Error:
        doneProcessing(self.serverUrl, "WFS", null);
    };

    this.onWmsGetCapabilitiesSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WMS", response, capabilities))
        processIncomingWMSLayers(capabilities, self.serverUrl);
      else    // Error:
        doneProcessing(self.serverUrl, "WMS", null);
    };

    this.onWcsGetCapabilitiesSucceeded = function(capabilities, response) {
      if(capabilities && isGoodResponse("WCS", response, capabilities))
        processIncomingWCSLayers(capabilities, self.serverUrl);
      else    // Error:
        doneProcessing(self.serverUrl, "WCS", null) ; 
    };
  }


  // Build a ServerInfo object from capabilities... if it has the necessary data.
  // Will return null if we don't have any data.
  var getServerInfo = function(capabilities)
  {
    var title    = "";
    var abstr    = "";
    var provider = "";
    var ok = false;

    if(capabilities.serviceIdentification) {
      title = capabilities.serviceIdentification.title;
      abstr = capabilities.serviceIdentification["abstract"];
      ok = true;
    }

    if(capabilities.serviceProvider)
    {
      provider = capabilities.serviceProvider.providerName;
      ok = true;
    }

    if(ok)
      new ServerInfo(title, abstr, provider);
    else
      return null;
  };


  // capabilities could contain responses from either GetCapabilities or DescribeCoverage
  var processIncomingWCSLayers = function(capabilities, serverUrl)
  {
    var serverInfo = null;

    // WCSDescribeCoverage requests return a dictionary rather than an array, as the other services do
    if(capabilities.requestType == "WCSDescribeCoverage") {
      var coverageKeys = capabilities.coverageDescriptionKeys;

      // Some servers return a husk of a response with no data in coverageDescriptionKeys
      if(coverageKeys)
        for(var i = 0, len = coverageKeys.length; i < len; i++) {
          var dataset = new WCSDataset(serverUrl, capabilities.coverageDescriptions[coverageKeys[i]]);
          mergeDatasetIntoLayerList(dataset, "WCS");
        }
    }

    else {   // WCSGetCapabilities
      if(capabilities.contentMetadata) {
        var coverageList = capabilities.contentMetadata;

        for(var i = 0, len = coverageList.length; i < len; i++) {
          var dataset = new WCSDataset(serverUrl, coverageList[i]);
          mergeDatasetIntoLayerList(dataset, "WCS");
        }

        serverInfo = getServerInfo(capabilities);   // Could return null

      }
    }

    doneProcessing(serverUrl, "WCS", serverInfo);
  };  

</script>

