
<h1>Register Datasets</h1>

<div id="error-list" class="error-box"></div>

<div class="explanation">
  <p>iGUESS uses datasets stored on remote servers.  To register datasets with the system, enter a server URL in the box below.
  iGUESS will probe the remote server and present you a list of datasets you can register.  In order to use a dataset with
  a module, you will need to tag it with the appropriate tags.  If you want to use the dataset for mapping
  purposes, use the Mapping tag.</p>

  <p>iGUESS will probe for WFS, WCS, and WMS servers at the URL provided below.  Layers offered by the WMS will be available for mapping,
  and layers offered by the WFS/WCS will be available for using as inputs to web processes.</p>
</div>


<div id="url_form">
  <table><tr>
    <td><input id="server_url" style="width: 100%" type="text" name="format" value='' placeholder="Enter URL or select a preset"/></td>
    <td>
      <button type="button" id="refresh_layers_button" style='padding-left: 20px; padding-right:20px;'>Load</button>
    </td>
  </tr><tr>
    <td>
      <select id="url-preset-select"  style="width: 100%">
        <option value="">Select a preset</option>
        <%= raw @current_city.dataserver_url.map { |m| '<option value="' + m.url + '">' + m.url + '</option>' }.join(" ") %>
      </select>
    </td>
  </tr><tr>
  <td colspan=2>
    <a href="#" id="save-preset" onclick="return false;">Save As Preset</a>
    <a href="#" id="delete-preset" onclick="return false;">Delete From Presets</a>
  </td>
  </tr></table>
</div>

<br>

</form>

<div style="height:100%; background-color:#eeeeee;">

<!--   <label class="label_radio" for="radio-show-wfs">
    <input name="rx" id="radio-show-wfs" value="1" type="radio" />
    WFS -- Only show datasets suitable for using as module inputs
  </label>
  <br>

  <label class="label_radio" for="radio-show-wcs">
    <input name="rx" id="radio-show-wcs" value="2" type="radio" />
    WCS -- Only show datasets suitable for mapping
  </label>
  <br>

  <label class="label_radio" for="radio-show-wms">
    <input name="rx" id="radio-show-wms" value="2" type="radio" />
    WMS -- Only show datasets suitable for mapping
  </label>
  <br>

  <label class="label_radio" for="radio-show-both">
    <input name="rx" id="radio-show-both" value="3" type="radio" checked/>
    Both -- Show all datasets on server
  </label>
</div> -->

<div class="progress-container">
  <span style="padding-left: 5px;" id="probing-wms">Probing map server... <img src="/assets/loading_spinner.gif"></span>
  <span style="padding-left: 5px;" id="probing-wfs">Probing feature server... <img src="/assets/loading_spinner.gif"></span>
  <span style="padding-left: 5px;" id="probing-wcs">Probing coverage server... <img src="/assets/loading_spinner.gif"></span>
</div>

<div class="server-info">
  <div class="server-name"></div>
  <div class="server-descr"></div>

  <div id="layer-display"></div>
</div>



<script type="text/javascript">

  // Add "js" style to body -- makes fancy checkboxes work
  $('body').attr("class",$('body').attr("class") + " js");

  GOOGLE_SRS = 'EPSG:3857';
</script>


<%= render :partial => '/shared/dataset_functions.html.erb' %>
<%= render :partial => '/shared/build_registered_layers.html.erb' %>
<%= render :partial => '/shared/build_data_layers.html.erb' %>

<script type="text/javascript">

  registeredDataLayers = {};


  var makeRegisteredLayer = function(serverUrl, datasetIdentifier, datasetId, tags, configCount) {

    if(registeredDataLayers[serverUrl] === undefined)
      registeredDataLayers[serverUrl] = {};

    registeredDataLayers[serverUrl][datasetIdentifier] = {
      serverUrl:   serverUrl,
      identifier:  datasetIdentifier,
      id:          datasetId,
      tags:        tags,
      configCount: configCount
    };
  };


  // Populate registeredDataLayers with data from the database
  <%= @datasets.reject{ |d| d.finalized == false }.
                map{ |d| "makeRegisteredLayer('" + d.server_url.gsub(/\\/, '\\\\\\') + "'," + 
                                             "'" + d.identifier + "'," + 
                                                   d.id.to_s() + "," + 
                                                   "[" + d.dataset_tags.reject{ |m| !m.tag }  # Prevent crash from blank tags
                                                                       .map{ |m| "'" + m.tag + "'" }.join(",") + "]," +
                                                   d.mod_configs.count.to_s() + ");\n"
                    }.
                join(' ') %>  


  // The city dropdown on the UR of the screen has changed -- we don't do much here anymore!
  var onLocationChanged = function(cityName) {
    LOCAL_SRS = { <% @cities.each do |city| %>'<%= city.name %>':'<%= city.srs %>',<% end %>}[cityName];
  }




  var getLayerNameFromCheckboxId = function(id)
  {
  	return id.substring('registered_'.length);	// Remove 'registered_' from the front of the string
  };


  // Called when we've gotten whatever response we're going to get from the server in question
  // i.e. when a WFS response arrives.  More responses might be coming (from WMS, and WCS, for example).
  var doneProcessing = function(url, type, serverInfo, status)    // status will be OK or ERROR
  {
    if(type == "WFS") {
      $("#probing-wfs").hide();
      wfsProcessingComplete = true;
    }
    else if(type == "WMS") {
      $("#probing-wms").hide();
      wmsProcessingComplete = true;
    }
    else if(type == "WCS") {
      $("#probing-wcs").hide();
      wcsProcessingComplete = true;
    }
    else { alert("Unknown type " + type); }


    displayServerDetails(serverInfo, type);   // Display this as it comes in

    if(!((wfsProcessingComplete || !showWfs()) &&
         (wmsProcessingComplete || !showWms()) &&
         (wcsProcessingComplete || !showWcs()) )    ) { return; }   // Still waiting for another service to return

    $(".progress-container").hide();
    displayLayers();
  };


  // Note that details can be null here
  var displayServerDetails = function(serverInfo, service) 
  {
    if(serverInfo && $('.server-name').html() == '')
    {
      var serverName  = serverInfo.title    || serverInfo.name || "Data Server";
      var serverDescr = serverInfo.abstract || "";

      $('.server-name').html('Server: ' + serverName);
      $('.server-descr').html(linkify(serverDescr));
      $('.server-info').show();
    }
  };


  var alreadyShownWmsError = false;   // Prevent us from being swamped by the same error message over and over

  var displayLayers = function() 
  {
    var mapId = 0;
    var first = true;

    var layerCount = Object.keys(discoveredLayers).length;
    var visibleLayers = 0;

    // If no layers were loaded, show an intelligble error message and bail
    if(layerCount == 0) {
      $('#layer-display').html('<div class="error-header">Please check the number and dial again</div>' +
                               '<div class="error-body">No data layers could be found on the specified server.<br>' +
                               'Either the URL is not that of a WMS/WFS/WCS data server, or the server is not responding. ' +
                               '</div>');

      $('.server-info').show();

      return;
    }


    $("#layer-display").html("");   // Clear the decks


    // Render found datasets in two passes -- first for registered items, second for unregistered ones.
    // This puts registered items at the top of the screen.
    for(var pass = 0; pass < 2; pass++)
    {
      for(var urlId in discoveredLayers)
      {
        var layer = discoveredLayers[urlId];      

        // Skip layers that the user has filtered out with the service radio buttons
        if(!showWfs() && !layer.type.hasObject("WMS")) { continue; }
        if(!showWms() && !layer.type.hasObject("WFS")) { continue; }
        if(!showWcs() && !layer.type.hasObject("WCS")) { continue; }

        // Avoid double-counting: only count layers during first pass
        if(pass == 0) {
          visibleLayers += 1;
        }

        if(registeredDataLayers[layer.serverUrl] == undefined) {
          // No already-registered layers for this url.. Put something here so the following lines won't crash.
          registeredDataLayers[layer.serverUrl] = {};
        }

        var regLyr     = registeredDataLayers[layer.serverUrl][layer.identifier];
        var registered = registeredDataLayers[layer.serverUrl] && regLyr;  

        if((pass == 0 && !registered) || (pass == 1 && registered)) { continue; }

        if(first) {
          $('#layer-display').html('<div>Server has <span id="layer-display-count"></span> layers.  ' +
                                   'Using local SRS "' + LOCAL_SRS + '".</div><ul id="layer-table"></ul>');
          first = false;
        }

        var mapDivId = "map" + mapId++;

        var availableInLocalProjection  = false;
        var availableInGoogleProjection = false;
        var srsList = [ ];

        if(layer.srs !== null) {
          availableInLocalProjection  = LOCAL_SRS  in layer.srs;
          availableInGoogleProjection = GOOGLE_SRS in layer.srs;
          srsList = Object.keys(layer.srs);
        }

      
        var registerControl = $(document.createElement('input'));

        registerControl.attr({ type:    "checkbox", 
                               name:    "registered_" + layer.identifier, 
                               class:   "switchbox",
                               id:      "registered_" + layer.identifier, 
                               value:   "registered", 
                               checked: registered 
                             });

        // var locl = $(document.createElement('img'));

        // if(availableInLocalProjection)
        //   locl.attr({ src: '/assets/available_local_projection_yes.png', 
        //               alt: 'Available in local projection' 
        //             });
        // else
        //   locl.attr({ src: '/assets/available_local_projection_no.png',  
        //               alt: 'Not available in local projection' 
        //             });


        var titleNode = $(document.createElement('div'));
        titleNode.attr({ class:'dataset_title', id:'dataset-title-' + sanitizeId(layer.identifier) });
        titleNode.text(layer.title != "" ? layer.title : layer.identifier);

        var servicesAvailNode = $(document.createElement('div'));
        servicesAvailNode.attr({ class:'dataset_services_available' });
        servicesAvailNode.text("Services: " + layer.type.join(', ') );

        if(regLyr) {  
          servicesAvailNode.append('<br>Used in ' + regLyr.configCount + ' configurations');
        }

        var abstractNode = "";

        // if(layer.abstract != "") {
          abstractNode = $(document.createElement('div'));
          abstractNode.attr({ class:'dataset_abstract', id:'dataset-abstract-' + sanitizeId(layer.identifier)});
          abstractNode.html(linkify(layer.abstract));
        // }

        var srsNode = $(document.createElement('div'));
        srsNode.attr({ class:'dataset_srs' });


        srsNode.append('<div><span class="proj-background">available in global projection</span><span class="' + 
                              (availableInGoogleProjection ? 'yes-background' : 'no-background') + '">' + 
                              (availableInGoogleProjection ? 'yes'            : 'no')            + '</span></div>')
               .append('<div><span class="proj-background">available in local projection</span><span class="' + 
                              (availableInLocalProjection  ? 'yes-background' : 'no-background') + '">' + 
                              (availableInLocalProjection  ? 'yes'            : 'no')            + '</span></div>')
               .append('<br><br><br>');


        var data_info = $(document.createElement('div'));
        var tagPickerControlId = getTagPickerControlId(layer.identifier);

        data_info.attr({ class:'data-info' });

        data_info.append(srsNode)
                 .append(registerControl)
                 .append(servicesAvailNode)
                 .append('<div class="tag-control"><span class="taglist-deletable-' + urlId + ' taglist"' + (regLyr ? "" : " disabled='disabled'") + '>' +  
                          (regLyr && regLyr.tags.length > 0 ?  createTagList(regLyr.tags, true, 
                                                                        layer.serverUrl, layer.identifier) : "No tags" ) +
                         '</span>' + 
                         makeTagPickerControl(layer, tagPickerControlId, registered) + '</div>');

        var sample_map = $(document.createElement("div"));
        sample_map.attr({ id:mapDivId, class:"sample-map" });   // Map will be rendered based on div's id

        var container = $(document.createElement("div"));
        container.attr({ class:"dataset" });
        container.append(titleNode)
                 .append(abstractNode)
                 .append(data_info)
                 .append(sample_map);

        // li_element (map-data-item)
        //    container (registered_dataset or unregistered_dataset)
        //       data_info
        //       sample_map


        var li_element = $(document.createElement("li"));
        li_element.attr({ class:"map-data-item " + (registered ? "registered_dataset" : "unregistered_dataset") });
        li_element.append(container);

        $("#layer-table").append(li_element);


        var activeSRS = null;

        if(layer.bbox !== null && layer.bbox.left !== null) {
          for (e in layer.bbox) { 
            activeSRS = e; 
            break; 
          }
        }

        if(activeSRS == null) {
          $('#' + mapDivId).html('<div class="center"><br><u>Map unavailable</u></div>');

          if(!alreadyShownWmsError) {
            var err = '<div>We cannot display sample maps for some datasets on this server.  The most likely cause of this problem is that the server\'s WMS functionality is not properly configured.  You can see how the server responds to WMS queries by clicking here: <a href="'+ WMS.getCapReq(layer.serverUrl) + '" target="_blank">WMS GetCapabilities</a></div>';

            $('#error-list').append(err).slideDown(500);

            alreadyShownWmsError = true;    // Only show error message once, to avoid flooding the error display
            }
        }
        else {
          var bbox = layer.bbox[activeSRS].bbox;

          var bounds = new OpenLayers.Bounds(bbox[0], bbox[1], bbox[2], bbox[3]);  //minx miny maxx maxy

          var miniMap = new OpenLayers.Map({
                  maxExtent:  bounds,
                  projection: new OpenLayers.Projection(activeSRS),
                  controls: [ new OpenLayers.Control.NavToolbar({zoomWheelEnabled: true}) ]
          });

          var lyr = new OpenLayers.Layer.WMS(
                  layer.title,
                  getServerUrl(),
                  { layers:  layer.identifier,
                    format:  "image/gif" 
                  }
          );

          miniMap.addLayer(lyr);
          miniMap.zoomToMaxExtent();
          miniMap.render(mapDivId);    // Renders to <div id="map#">
        }
        
        // Now that the tag picker has finally been added to the dom, we can populate it
        if(layer.type.hasObject('WMS'))
          addWmsOptionToDropdown(tagPickerControlId);

        if(layer.type.hasObject('WFS') || layer.type.hasObject('WCS'))
          addWfsWcsOptionsToDropdown(tagPickerControlId);

      }  // end for loop
    }  // for pass = 0 to 2


    addDeleteTagClickHander();


    $("#layer-display-count").text(visibleLayers);    // Update layer display


    // Add toggle switch after each checkbox.  If checked, then toggle the switch.
    $(".switchbox").after(function() {
       if($(this).is(":checked")) {
         return "<a href='#' class='toggle checked' ref='"+$(this).attr("id")+"'></a>";
       } else {
         return "<a href='#' class='toggle' ref='"+$(this).attr("id")+"'></a>";
       }
    });


    //  When the toggle switch is clicked, check off / de-select the associated checkbox
    // Want to find this when we search for "registered_"
    $(".toggle").click(function(e) 
    {
      var checkboxID = $(this).attr("ref");

      var checkbox = document.getElementById(checkboxID);
      var datasetIdentifier = getLayerNameFromCheckboxId(checkboxID);

      var tagPickerControl = document.getElementById(getTagPickerControlId(datasetIdentifier));
      var serverUrl = getServerUrl();

      var dataLayer = registeredDataLayers[serverUrl][datasetIdentifier];

      if(dataLayer && dataLayer.configCount > 0) {
        var ct = dataLayer.configCount || 0;
        var c =  (ct == 1) ? "configuration" : "configurations";
        var t =  (ct == 1) ? "this"          : "these";
        var th = (ct == 1) ? "it"            : "them";

        if(!confirm("This dataset is in use by " + ct + " " + c + ". " +
                    "Unregistering it will cause it to be removed from " + t + " " + c + ".\n\n" +
                    "Click OK if you are sure you want to unregister this dataset.")) {
          e.preventDefault();
          return;
        }
      }

      var urlId = cssEscape(serverUrl + datasetIdentifier);

      if(checkbox.checked) {
         // ===== Unregistering dataset =====
         checkbox.checked = false;
         tagPickerControl.disabled = true;

        // Let the server know this layer is no longer registered -- to do this we delete the corresponding
        // record in the datasets table.
        $.ajax({
          type: 'DELETE',      // DELETE combined with url below triggers "destroy_by_params" action on controller
          url: '<%= url_for(:controller => 'datasets', :action => 'destroy_by_params') %>',
          data: 'dataset[identifier]='  + datasetIdentifier +
                '&dataset[server_url]=' + serverUrl,

          headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
          success: function(data) {  }
          });

        // Remove layer from the list of registered layers
        delete registeredDataLayers[serverUrl][datasetIdentifier];

        $(".taglist-deletable-" + urlId + " .tag")              .attr("disabled", true);
        $(".taglist-deletable-" + urlId + " .tag-delete-button").attr("disabled", true);
        $(".taglist-deletable-" + urlId + " .tag-delete-button").off("click");   // Disable clicking
        $(".taglist-deletable-" + urlId).attr("disabled", true);

      } else {
        // ===== Register dataset =====
        checkbox.checked = true;
        tagPickerControl.disabled = false;

        var layer = discoveredLayers[urlId];

        var service = '';
        if(     layer.type.hasObject("WFS")) { service = "WFS"; }
        else if(layer.type.hasObject("WCS")) { service = "WCS"; }

        var taglist = extractTagList(serverUrl, datasetIdentifier);

        var title    = $("#dataset-title-"    + sanitizeId(datasetIdentifier)).text();
        var abstract = $("#dataset-abstract-" + sanitizeId(datasetIdentifier)).text();

        $(".taglist-deletable-" + urlId).attr("disabled", false);


        // Let the server know this layer is now registered -- to do this we must create a new record in
        // our datasets table.
        $.ajax({
          type: 'POST',      // POST combined with url below triggers "create" action on controller
          url: '<%= url_for(:controller => 'datasets', :action => 'create', :format=>:json) %>',
          data: 'dataset[identifier]='    + datasetIdentifier +
                '&dataset[service]='      + service   +
                '&dataset[server_url]='   + serverUrl +
                '&tags='                  + taglist +
                '&dataset[title]='        + encodeURIComponent(title) +
                '&dataset[abstract]='     + encodeURIComponent(abstract) +
                '&dataset[alive]=true'    +
                '&cityName=' + $.cookie('city'),
          headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
          success: function(data) {
            // Add layer to the list of registered layers
            makeRegisteredLayer(serverUrl, data.dataset.identifier, data.dataset.id, data.tags, 0);
            updateTags(serverUrl, data.dataset.identifier, data.tags);
          }
        });
      }

      $(this).toggleClass("checked");
      $(this).parent().parent().parent().toggleClass("registered_dataset");
      $(this).parent().parent().parent().toggleClass("unregistered_dataset");

      e.preventDefault();

    });  // end toggle state change handler

    
    // Because of our unusual layout, we need to manually adjust things to get equal tile sizes... lame!
    equalizeRowHeights();
    $('#layer-table').equalWidths();


  }


  var extractTagList = function(serverUrl, datasetIdentifier) 
  {
    var urlId = cssEscape(serverUrl + datasetIdentifier);

    var tags = [];


    $('.taglist-deletable-' + urlId).children().each(function() {
        tags.push($(this).text());
    });

    return tags;
  };


  // Class declaration
  var ServiceProbe = function(serverUrl) 
  {   
    this.successCount = 0;
    this.failCount    = 0;
    this.WmsSucceeded = null;
    this.WfsSucceeded = null;
    this.WcsSucceeded = null;
    this.serverUrl    = serverUrl;

    var self = this;    // Stored pointer to ourselves, will be needed in the callback
  
    
    this.statusChanged = function() 
    {
      // Do nothing
    };

    this.onGetCapabilitiesSucceeded = function() 
    {
      self.successCount++;
      self.statusChanged();
    };

    this.onGetCapabilitiesFailed = function() 
    {
      self.failCount++;
      self.statusChanged();
    };

    // Explanation of args: http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.DataProxy-event-load
    this.onWfsGetCapabilitiesSucceeded = function(dataProxy, records, options) 
    { 
      // console.log("WFSSuccess>>", arguments);
      self.onGetCapabilitiesSucceeded();
      self.WfsSucceeded = true; 

      onWfsGetCapabilitiesSucceeded(dataProxy, records);
    };

    this.onWmsGetCapabilitiesSucceeded = function(dataProxy, records, options) 
    { 
      self.onGetCapabilitiesSucceeded();
      self.WmsSucceeded = true;

      onWmsGetCapabilitiesSucceeded(dataProxy, records);
    };

    this.onWcsGetCapabilitiesSucceeded = function(dataProxy, records, options) 
    { 
      self.onGetCapabilitiesSucceeded();
      self.WcsSucceeded = true;

      onWcsGetCapabilitiesSucceeded(dataProxy, records);
    };

    // Explanation of args: http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.DataProxy-event-exception
    this.onWfsGetCapabilitiesFailed = function(dataProxy, type, action, options, response, arg) 
    { 
      if(type == 'response') {
        // alert("Cannot parse response from WFS server.");
        // console.log("Response", response.responseText)
      }

      // console.log("WFS Exception 99", arguments);
      self.onGetCapabilitiesFailed();
      self.WfsSucceeded = false;
      doneProcessing(self.serverUrl, 'WFS', null, 'ERROR');
    };

    this.onWmsGetCapabilitiesFailed = function(dataProxy, type, action, options, response, arg) 
    { 
      // alert("Error encountered on wms request");
      self.onGetCapabilitiesFailed();
      self.WmsSucceeded = false;
      doneProcessing(self.serverUrl, 'WMS', null, 'ERROR');
    };

    this.onWcsGetCapabilitiesFailed = function(dataProxy, type, action, options, response, arg) 
    { 
      self.onGetCapabilitiesFailed();
      self.WcsSucceeded = false;
      doneProcessing(self.serverUrl, 'WCS', null, 'ERROR');
    };

    this.startProbing = function() 
    { 
      WFS.updateLayerList(self.serverUrl, self.onWfsGetCapabilitiesSucceeded, self.onWfsGetCapabilitiesFailed );
      WCS.updateLayerList(self.serverUrl, self.onWcsGetCapabilitiesSucceeded, self.onWcsGetCapabilitiesFailed );
      WMS.updateLayerList(self.serverUrl, self.onWmsGetCapabilitiesSucceeded, self.onWmsGetCapabilitiesFailed );
    };
  }


  var updateButtonVisibility = function()
  {
    var serverUrl = getServerUrl().trim();

    if(serverUrl === "") {
      $('#save-preset').hide();
      $('#delete-preset').hide();
    } 
    else {
      var found = false;

      // Check if url is already on the preset list.  If not, add a save preset button.
      $("#url-preset-select > option").each(function() {
        if(this.value.trim() === serverUrl) 
          found = true;
      });


      if(found) {    
        $('#save-preset').hide();
        $('#delete-preset').show();
      }
      else {
        $('#save-preset').show();
        $('#delete-preset').hide();
      }
    }

    if(serverUrl === "") 
      $('#refresh_layers_button').attr('disabled', true);

    else if(serverUrl === currentlyLoadedUrl)
      $('#refresh_layers_button').html('Reload')
                                 .attr('disabled', false);
    else
      $('#refresh_layers_button').html('Load')
                                 .attr('disabled', false);
  };


  var currentlyLoadedUrl = "";

  // This gets called when the Remote Data Server URL is changed
  var loadDataLayers = function()
  {
    var serverUrl = getServerUrl().trim();
    currentlyLoadedUrl = serverUrl;

    updateButtonVisibility();

    if(serverUrl === "") 
      return;   

    // Reset various displays
    $(".server-name").html("");   
    $("#error-list").html("");
    $("#error-list").slideUp(200);
    alreadyShownWmsError = false;
    discoveredLayers = {};


    showProbingIndicators();

    $("#layer-display").html("");

    wfsProcessingComplete = false;
    wmsProcessingComplete = false;
    wcsProcessingComplete = true;   // for now

    var probe = new ServiceProbe(serverUrl);
    probe.startProbing();
  };


  // Save current value of text box to database
  var savePreset = function()
  {
    var url = getServerUrl();
    $.ajax({
      type: 'POST',      // POST combined with url below triggers "create" action on controller
      url: '<%= url_for(:controller => 'dataserver_url', :action => 'create', :format=>:json) %>',
      data: 'city[id]=' + <%= @current_city.id %> +
            '&url=' + url,
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' /*,
                 'Content-Type': 'application/json' */},
      success: function(data) { 
        $('#url-preset-select').append('<option value="' + url + '">' + url + '</option>');
        updateButtonVisibility();
      }
    });
  };


  // Delete current value of text box to database
  var deletePreset = function()
  {
    if(!confirm('Do really want to permanently delete this preset?'))
      return;

    var url = getServerUrl();
    $.ajax({
      type: 'DELETE',      // DELETE combined with url below triggers "destroy" action on controller
      url: '<%= url_for(:controller => 'dataserver_url', :action => 'destroy', :format=>:json) %>',
      data: 'city[id]=' + <%= @current_city.id %> +
            '&url=' + url,
      headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' /*,
                 'Content-Type': 'application/json' */},
      success: function(data) { 
        $('#url-preset-select option[value="' + url + '"]').remove();   // Delete the option
        $('#server_url').val('');                                       // Clear the input box
        updateButtonVisibility();
      }
    });
  };


  function showWfs() 
  {
    return true;    //return $('#radio-show-wfs').prop('checked') || $('#radio-show-both').prop('checked');
  };

  function showWms() 
  {
    return true;    //return $('#radio-show-wms').prop('checked') || $('#radio-show-both').prop('checked');
  };

  function showWcs() 
  {
    return true;    //return $('#radio-show-wfs').prop('checked') || $('#radio-show-both').prop('checked');
  };

  function showProbingIndicators() 
  {
    var anyShown = false;

    if(showWfs()) { $('#probing-wfs').show(); anyShown = true; }
    if(showWms()) { $('#probing-wms').show(); anyShown = true; }
    if(showWcs()) { $('#probing-wcs').show(); anyShown = true; }

    if(anyShown)
    {
      $('.progress-container').show();
    }
    else {
      $('.progress-container').hide();
    }
  };


  function hideProbingIndicators() 
  {
    $('#probing-wms').hide();
    $('#probing-wfs').hide();
    $('#probing-wcs').hide();
    $('.progress-container').hide();
  };


  var getServerUrl = function() 
  { 
    return $('#server_url').val().trim(); 
  };


  $(document).ready(function ()
  {
    hideProbingIndicators();
    onLocationChanged('<%= @current_city.name %>');   // Update SRS and set default URL

    // Event handlers for various controls
    // $('#server_url').change(loadDataLayers);
    $('#server_url').keyup(updateButtonVisibility);
    $('#refresh_layers_button').click(loadDataLayers)
                               .attr('disabled', true);
    $('#save-preset').click(savePreset);
    $('#delete-preset').click(deletePreset);

    $('#server_url').focus(function() { $('#refresh_layers_button').html('Load'); });

    // Event handlers for our radio buttons
    $("#radio-show-wfs") .click(function() { displayLayers(); });
    $("#radio-show-wms") .click(function() { displayLayers(); });
    $("#radio-show-both").click(function() { displayLayers(); });

    $('#url-preset-select').change(function() { $("#server_url").val($(this).val()); 
                                                $(this).val(""); 
                                                updateButtonVisibility();
                                              });
    $('#save-preset').hide();
    $('#delete-preset').hide();
  });



  // Adapted from http://css-tricks.com/equal-height-blocks-in-rows/
  var currentTallest = 0,
      currentRowStart = 0,
      rowDivs = new Array();

  function setConformingHeight(el, newHeight) {
     // set the height to something new, but remember the original height in case things change
     el.data("originalHeight", (el.data("originalHeight") == undefined) ? (el.height()) : (el.data("originalHeight")));
     el.height(newHeight);
  }

  function getOriginalHeight(el) {
     // if the height has changed, send the originalHeight
     return (el.data("originalHeight") == undefined) ? (el.height()) : (el.data("originalHeight"));
  }

  function equalizeRowHeights() {

     // find the tallest LI in the row, and set the heights of all of the LIs to match it.
     $('li.map-data-item').each(function() {
        // "caching"
        var $el = $(this);
        
        var topPosition = $el.position().top;

        if (currentRowStart != topPosition) {

           // we just came to a new row.  Set all the heights on the completed row
           for(currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) setConformingHeight(rowDivs[currentDiv], currentTallest);

           // set the variables for the new row
           rowDivs.length = 0; // empty the array
           currentRowStart = topPosition;
           currentTallest = getOriginalHeight($el);
           rowDivs.push($el);

        } else {

           // another div on the current row.  Add it to the list and check if it's taller
           rowDivs.push($el);
           currentTallest = (currentTallest < getOriginalHeight($el)) ? (getOriginalHeight($el)) : (currentTallest);

        }
        // do the last row
        for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) setConformingHeight(rowDivs[currentDiv], currentTallest);

     });

  }

  // Recalc heights if window size changes
  $(window).resize(function() {
     equalizeRowHeights();
  });

</script>

