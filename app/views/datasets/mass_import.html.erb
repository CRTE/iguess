<h1>Register Datasets</h1>

<div class="explanation">
	iGUESS uses datasets stored on remote servers.  To register datasets with the system, enter a server URL in the box below.
	iGUESS will probe the remote server and present you a list of datasets you can register.  In order to use a dataset with
	a module, you will need to choose a data type from the drop down box.  If you only want to use the dataset for mapping
	purposes, select Mapping Only.
	<p>
	iGUESS will probe for WFS and WMS servers at the URL provided below.  Layers offered by the WMS will be available for mapping,
	and layers offered by the WFS will be available for using as inputs to web processes.

  <ul>
    <li>http://ows.gis.rotterdam.nl/cgi-bin/mapserv.exe?map=d:\gwr\webdata\mapserver\map\gwr_basis_pub.map
    <li>http://logis.ludwigsburg.de/mapguide2011/mapagent/mapagent.fcgi
</div>


<script type="text/javascript">

  // Add "js" style to body -- makes fancy checkboxes work
  $('body').attr("class",$('body').attr("class") + " js");

  GOOGLE_SRS = 'EPSG:3857';

  var urls = [<%= @wps_servers.map{ |w| "'" + w.url + "'" }.join(',') %>];

   // For each url in our database, start probing the server
  for(var i = 0; i < urls.length; i++) {  WPS.probeWPS_getDataTypes(urls[i]);  }


  var dataDiscoveryComplete = false;
  var dataTypeList = [];

  var onDataTypeDiscoveryCompleted = function(dataTypes)
  {
    $('data-type-dropdown').show();
    // populateSelectBox(document.getElementById("data-type-dropdown-control"), dataTypes);
    dataTypeList = dataTypes.sort();
    dataDiscoveryComplete = true;
  }

</script>


<%= render :partial => '/shared/build_registered_layers.html.erb' %>
<%= render :partial => '/shared/build_data_layers.html.erb' %>

<script type="text/javascript">

  function getServerUrl() { return $('#dataset_url').val().trim(); }

  // User changes the value of one of the dataType dropdowns
  function onDataTypeChanged(id)
  {
    var layerName = getLayerNameFromDataTypeId(id);
    var server = getServerUrl();
    var layerKey = makeKey(server, layerName);

    // Let the server know the dataType has changed
		var dataTypeControl = document.getElementById(id);

		$.ajax({
			type: 'PUT',      // PUT combined with url below triggers "update" action on controller
			url:  '<%= url_for(:controller => 'datasets', :action => 'update_data_type') %>',
			data: 'dataset[identifier]='    + layerName +
			      '&dataset[server_url]='   + server    +
			      '&dataset[dataset_type]=' + dataTypeControl.value,
			headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
			success: function(data) {  }
	  });

    var rubyId = registeredDataLayers[layerKey].rubyId;
	  registeredDataLayers[layerKey] = makeRegisteredLayer(dataTypeControl.value, rubyId, 0);
  }


  function confirmChange(id) {
    var layerName = getLayerNameFromDataTypeId(id);
    var server    = getServerUrl();
    var layerKey  = makeKey(server, layerName);

    if(registeredDataLayers[layerKey] == undefined || registeredDataLayers[layerKey].configCount == 0) { return true; }

    var ct = registeredDataLayers[layerKey].configCount;
    var c  = (ct == 1) ? "configuration" : "configurations";
    var t  = (ct == 1) ? "this" : "these";
    var th = (ct == 1) ? "it" : "them";

    return confirm("This dataset is in use by " + ct + " " + c + ". " +
                   "Changing its type will cause it to be removed from " + t + " " + c + ".\n\n" +
                   "Click OK if you are sure you want to change the type of this dataset.");
  }


  // The city dropdown on the UR of the screen has changed
  var onLocationChanged = function(cityName) {
    // Update to default city URL -- use gsub to fix those @#$%^ backslashes in the URL...
    $('#dataset_url').val(
            { <% @cities.each do |city| %>'<%= city.name %>':'<%= city.url.gsub(/\\/, '\\\\\\') %>',<% end %>}[cityName]
    );
    LOCAL_SRS = { <% @cities.each do |city| %>'<%= city.name %>':'<%= city.srs %>',<% end %>}[cityName];
  }


  function getDataTypeControlId(layerName)
  {
  	return 'data_type_' + layerName;
  }

  function getLayerNameFromCheckboxId(id)
  {
  	return id.substring('registered_'.length);	// Remove 'registered_' from the front of the string
  }

  function getLayerNameFromDataTypeId(id)
  {
  	return id.substring('data_type_'.length);	// Remove 'data_type_' from the front of the string
  }


  // Called when we've gotten whatever response we're going to get from the server in question
  function doneProcessing(url, type, status)    // status will be OK or ERROR
  {
    if(type == 'WFS') {
      $('#probing-wfs').hide();
      wfsProcessingComplete = true;
    }
    else if(type == 'WMS') {
      $('#probing-wms').hide();
      wmsProcessingComplete = true;
    }
    else if(type == 'WCS') {
      $('#probing-wcs').hide();
      wcsProcessingComplete = true;
    }
    else { alert("Unknown type " + type); }

    if(!((wfsProcessingComplete || !showWfs()) &&
         (wmsProcessingComplete || !showWms()) &&
         (wcsProcessingComplete || !showWcs()) )    ) { return; }   // Still waiting for another service to return

    displayLayers();
  }


  var displayLayers = function()
  {
    var server = getServerUrl();
    var mapId = 0;
    var first = true;

    var layerCount = Object.keys(discoveredLayers).length;
    var visibleLayers = 0;


    // If no layers were loaded, show an intelligble error message and bail
    if(layerCount == 0) {
      $('#layer-display').html('<div class="errorHeader">Please check the number and dial again</div>' +
                             '<div class="errorBody">No data layers could be found on the specified server.<br>' +
                             'Either the URL is not that of a WMS/WFS/WCS data server, or the server is not responding. ' +
                             '</div>');
      return;
    }


    $('#layer-display').html('');   // Clear the decks


    // Render found datasets in two passes -- first for registered items, second for unregistered ones.
    // This puts registered items at the top of the screen.
    for(var pass = 0; pass < 2; pass++)
    {
      for(var layerKey in discoveredLayers)
      {
        var layer = discoveredLayers[layerKey];

        // Skip layers that the user has filtered out with the service radio buttons
        if(!showWfs() && !layer.type.hasObject('WMS')) { continue; }
        if(!showWms() && !layer.type.hasObject('WFS')) { continue; }

        // Avoid double-counting: only count layers during first pass
        if(pass == 0) {
          visibleLayers += 1;
        }

        var registered = layerKey in registeredDataLayers;

        if((pass == 0 && !registered) || (pass == 1 && registered)) { continue; }

        if(first) {
          $('#layer-display').html('<div>Showing <span id="layer-display-count"></span> layers.  ' +
                                   'Using local SRS "' + LOCAL_SRS + '".</div><ul id="layer-table"></ul>');
          first = false;
        }

        var mapDivId = 'map' + mapId++;

        var availableInLocalProjection  = false;
        var availableInGoogleProjection = false;
        var srsList = [ ];

        if(layer.srs !== null) {
          availableInLocalProjection  = LOCAL_SRS  in layer.srs;
          availableInGoogleProjection = GOOGLE_SRS in layer.srs;
          srsList = Object.keys(layer.srs);
        }

        var dataTypeControl = "Couldn't load data types!";

        if(dataDiscoveryComplete) {   // Will typically be the case, though we need to handle the case where this is false

          dataTypeControl = $(document.createElement('select'));
          dataTypeControl.attr({ class:'data-type-dropdown-control', id:getDataTypeControlId(layer.identifier), disabled:!registered });

          // What to do when the user changes dataType for a layer


          dataTypeControl.focus(function() {
            prev_val = $(this).val();     // Store original value
          }).change(function() {
                    $(this).blur(); // Firefox fix
                    var reallyChange = confirmChange(this.id);
                    if(reallyChange) { onDataTypeChanged(this.id); }    // Procede with change handler
                    else             { $(this).val(prev_val); }         // Restore value
                  });

          if(layer.type.hasObject('WMS')) {
            dataTypeControl.append('<option>Mapping Only</option>');
          }

          if(layer.type.hasObject('WFS')) {
            for(var j = 0, jlen = dataTypeList.length; j < jlen; j++) {
              dataTypeControl.append('<option value="' + dataTypeList[j].id + '">' + dataTypeList[j].id + '</option>');
            }
          }

          if(registeredDataLayers[layerKey] != undefined) {
            dataTypeControl.val(registeredDataLayers[layerKey].identifier);    // Make selected item selected
          }
        }

        var registerControl = $(document.createElement('input'));

        registerControl.attr({ type:'checkbox', name:'registered_' + layer.identifier, class:'switchbox',
                               id:'registered_' + layer.identifier, value:"registered", checked:registered });


        var goog = $(document.createElement('img'));

        if(availableInGoogleProjection) {
          goog.attr({ src:"/assets/available_google_projection_yes.png", alt:"Available in Google projection" });
        } else {
          goog.attr({ src:"/assets/available_google_projection_no.png",  alt:"Not available in Google projection" });
        }

        var locl = $(document.createElement('img'));

        if(availableInLocalProjection) {
          locl.attr({ src:"/assets/available_local_projection_yes.png", alt:"Available in local projection" });
        } else {
          locl.attr({ src:"/assets/available_local_projection_no.png",  alt:"Not available in local projection" });
        }

        var titleNode = $(document.createElement('div'));
        titleNode.attr({ class:'dataset_title' });
        titleNode.text(layer.title != "" ? layer.title : layer.identifier);

        var servicesAvailNode = $(document.createElement('div'));
        servicesAvailNode.attr({ class:'dataset_services_available' });
        servicesAvailNode.text("Services: " + layer.type.join(', ') );

        if(registeredDataLayers[layerKey] != undefined) {
          servicesAvailNode.append('<br>Used in ' + registeredDataLayers[layerKey].configCount + ' configurations');
        }

        var abstractNode = "";

        if(layer.abstract != "") {
          abstractNode = $(document.createElement('div'));
          abstractNode.attr({ class:'dataset_abstract' });
          abstractNode.text(layer.abstract);
        }

        var srsNode = $(document.createElement('div'));
        srsNode.attr({ class:'dataset_srs' });
        srsNode.append(goog)
               .append('<br>')
               .append(locl);


        var data_info = $(document.createElement('div'));
        data_info.attr({ class:'data-info' });

        data_info.append(srsNode)
                 .append(registerControl)
                 .append(servicesAvailNode)
                 .append('<br>')
                 .append(dataTypeControl);

        var sample_map = $(document.createElement('div'));
        sample_map.attr({ id:mapDivId, class:'sample-map' });   // Map will be rendered based on div's id

        var container = $(document.createElement('div'));
        container.attr({ class:'dataset ' + (registered ? 'registered_dataset' : 'unregistered_dataset'), id:'td_' + layer.identifier });
        container.append(titleNode)
                 .append(abstractNode)
                 .append(data_info)
                 .append(sample_map);

        // tr_element (map-data-item)
        //    container (registered_dataset or unregistered_dataset)
        //       data_info
        //       sample_map

        var tr_element = $(document.createElement('li'));
        tr_element.attr({ class:'map-data-item' });
        tr_element.append(container);

        $('#layer-table').append(tr_element);

        var activeSRS = null;
        if(layer.bbox !== null) {
          for (e in layer.bbox) { activeSRS = e; break; }
        }

        if(activeSRS !== null)
        {
          var bbox = layer.bbox[activeSRS].bbox;

          // var bounds = new OpenLayers.Bounds(bbox[0], bbox[1], bbox[2], bbox[3]);  //minx miny maxx maxy
          var boundsMap  = new OpenLayers.Bounds(-1015000, 5845000, 1100000, 8000000);  // Nothing will be displayed outside these bounds (Poland - Ireland)

          var miniMap = new OpenLayers.Map({
                  maxExtent:  boundsMap,
                  projection: new OpenLayers.Projection(activeSRS),
                  controls: []
          });

          var lyr = new OpenLayers.Layer.WMS(
                  layer.title,
                  server,
                  { layers:  layer.identifier,
                    format:  "image/gif",
                    srsName: activeSRS,
                    srs:     activeSRS
                  }
          );

          miniMap.addLayer(lyr);
          miniMap.zoomToMaxExtent();
          miniMap.render(mapDivId);    // Renders to <div id="map#">
        }
      }  // end for loop
    }  // for pass = 0 to 2


    $('#layer-display-count').text(visibleLayers);    // Update layer display


    // Add toggle switch after each checkbox.  If checked, then toggle the switch.
    $('.switchbox').after(function() {
       if($(this).is(":checked")) {
         return "<a href='#' class='toggle checked' ref='"+$(this).attr("id")+"'></a>";
       } else {
         return "<a href='#' class='toggle' ref='"+$(this).attr("id")+"'></a>";
       }
    });


    //  When the toggle switch is clicked, check off / de-select the associated checkbox
    $('.toggle').click(function(e) {
      var checkboxID = $(this).attr("ref");

      var checkbox = document.getElementById(checkboxID);
      var layerName = getLayerNameFromCheckboxId(checkboxID);

      var dataTypeControl = document.getElementById(getDataTypeControlId(layerName));
      var server = getServerUrl();

      var layerKey = makeKey(server, layerName);

      if(registeredDataLayers[layerKey] != undefined && registeredDataLayers[layerKey].configCount > 0) {
        var ct = registeredDataLayers[layerKey].configCount || 0;
        var c =  (ct == 1) ? "configuration" : "configurations";
        var t =  (ct == 1) ? "this"          : "these";
        var th = (ct == 1) ? "it"            : "them";

        if(!confirm("This dataset is in use by " + ct + " " + c + ". " +
                    "Unregistering it will cause it to be removed from " + t + " " + c + ".\n\n" +
                    "Click OK if you are sure you want to unregister this dataset.")) {
          e.preventDefault();
          return;
        }
      }

      if(checkbox.checked) {
         // ===== Unregistering dataset =====
         checkbox.checked = false;
         dataTypeControl.disabled = true;

        // Let the server know this layer is no longer registered -- to do this we delete the corresponding
        // record in the datasets table.
        $.ajax({
          type: 'DELETE',      // DELETE combined with url below triggers "destroy_by_params" action on controller
          url: '<%= url_for(:controller => 'datasets', :action => 'destroy_by_params') %>',
          data: 'dataset[identifier]=' + layerName +
                '&dataset[server_url]=' + server,
          headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
          success: function(data) {  }
          });

        // Remove layer from the list of registered layers
        delete registeredDataLayers[layerKey];

      } else {
         // ===== Registering dataset =====
         checkbox.checked = true;
         dataTypeControl.disabled = false;

        // Let the server know this layer is now registered -- to do this we must create a new record in
        // our datasets table.
        $.ajax({
          type: 'POST',      // POST combined with url below triggers "create" action on controller
          url: '<%= url_for(:controller => 'datasets', :action => 'create', :format=>:json) %>',
          data: 'dataset[identifier]=' + layerName +
                '&dataset[server_url]=' + server +
                '&dataset[dataset_type]=' + dataTypeControl.value +
                '&cityName=' + $.cookie('city'),
          headers: { 'X-CSRF-Token': '<%= form_authenticity_token.to_s %>' },
          success: function(data) {
            // Add layer to the list of registered layers
            registeredDataLayers[layerKey] = makeRegisteredLayer(data.identifier, data.id, 0);
          }
        });
      }

      $(this).toggleClass("checked");
      $(this).parent().parent().toggleClass("registered_dataset");
      $(this).parent().parent().toggleClass("unregistered_dataset");

      e.preventDefault();

    });  // end toggle state change handler
  }


  // Class declaration
  var ServiceProbe = function(serverUrl) {   
    this.successCount = 0;
    this.failCount    = 0;
    this.WmsSucceeded = null;
    this.WfsSucceeded = null;
    this.WcsSucceeded = null;
    this.serverUrl    = serverUrl;

    var self = this;    // Stored pointer to ourselves, will be needed in the callback
  
    
    this.statusChanged = function() {
      
    }

    this.onGetCapabilitiesSucceeded = function() {
      self.successCount++;
      self.statusChanged();
    }

    this.onGetCapabilitiesFailed = function() {
      self.failCount++;
      self.statusChanged();
    }

    // Explanation of args: http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.DataProxy-event-load
    this.onWfsGetCapabilitiesSucceeded = function(dataProxy, records, options) { 
      // console.log("WFSSuccess>>", arguments);
      self.onGetCapabilitiesSucceeded();
      self.WfsSucceeded = true; 

      onWfsGetCapabilitiesSucceeded(dataProxy, records);
    }

    this.onWmsGetCapabilitiesSucceeded = function(dataProxy, records, options) { 
      self.onGetCapabilitiesSucceeded();
      self.WmsSucceeded = true;

      onWmsGetCapabilitiesSucceeded(dataProxy, records);
    }

    this.onWcsGetCapabilitiesSucceeded = function(dataProxy, records, options) { 
      self.onGetCapabilitiesSucceeded();
      self.WcsSucceeded = true;

      onWcsGetCapabilitiesSucceeded(dataProxy, records);
    }

    // Explanation of args: http://docs.sencha.com/ext-js/3-4/#!/api/Ext.data.DataProxy-event-exception
    this.onWfsGetCapabilitiesFailed = function(dataProxy, type, action, options, response, arg) { 
      if(type == 'response') {
        // alert("Cannot parse response from WFS server.");
        // console.log("Response", response.responseText)
      }

      // console.log("WFS Exception 99", arguments);
      self.onGetCapabilitiesFailed();
      self.WfsSucceeded = false;
      doneProcessing(self.serverUrl, 'WFS', 'ERROR');
    }

    this.onWmsGetCapabilitiesFailed = function(dataProxy, type, action, options, response, arg) { 
      // alert("Error encountered on wms request");
      self.onGetCapabilitiesFailed();
      self.WmsSucceeded = false;
      doneProcessing(self.serverUrl, 'WMS', 'ERROR');
    }

    this.onWcsGetCapabilitiesFailed = function(dataProxy, type, action, options, response, arg) { 
      self.onGetCapabilitiesFailed();
      self.WcsSucceeded = false;
      doneProcessing(self.serverUrl, 'WCS', 'ERROR');
    }

    this.startProbing = function() { 
      WFS.updateLayerList(self.serverUrl, self.onWfsGetCapabilitiesSucceeded, self.onWfsGetCapabilitiesFailed );
      WMS.updateLayerList(self.serverUrl, self.onWmsGetCapabilitiesSucceeded, self.onWmsGetCapabilitiesFailed );

    };
  }


  // This gets called when the Remote Data Server URL is changed
  var update = function()
  {
    var serverUrl = getServerUrl();

    if(serverUrl == "") {
      return;   // Do nothing if URL is blank
    }

    showProbingIndicators();

    $('#layer-display').html('');
    discoveredLayers = { };

    wfsProcessingComplete = false;
    wmsProcessingComplete = false;
    wcsProcessingComplete = true;   // for now

    $('#refresh_layers_button').html('Reload');

    var probe = new ServiceProbe(serverUrl);
    probe.startProbing();
  };


  function showWfs() {
    return $('#radio-show-wfs').prop('checked') || $('#radio-show-both').prop('checked');
  }

  function showWms() {
    return $('#radio-show-wms').prop('checked') || $('#radio-show-both').prop('checked');
  }

  function showWcs() {
    return false; //$('#radio-show-wfs').prop('checked') || $('#radio-show-both').prop('checked');
  }

  function showProbingIndicators() {
    if(showWfs()) { $('#probing-wfs').show(); }
    if(showWms()) { $('#probing-wms').show(); }
    if(showWcs()) { $('#probing-wcs').show(); }
  }

  function hideProbingIndicators() {
    $('#probing-wms').hide();
    $('#probing-wfs').hide();
    $('#probing-wcs').hide();
  }


  $(document).ready(function ()
  {
    hideProbingIndicators();
    onLocationChanged('<%= @current_city.name %>');   // Update SRS and set default URL

    // Event handlers for various controls
    $('#dataset_url').change(update);
    $('#refresh_layers_button').click(update);
    $('#dataset_url').focus(function() { $('#refresh_layers_button').html('Load'); });

    // Event handlers for our radio buttons
    $("#radio-show-wfs") .click(function() { displayLayers(); });
    $("#radio-show-wms") .click(function() { displayLayers(); });
    $("#radio-show-both").click(function() { displayLayers(); });
  });
</script>


<form id="url_form">

<div class="field">
  Remote Data Server URL:<br>
  <input id="dataset_url" type="text" size="90"/>
  <button type="button" id="refresh_layers_button" style="padding-left: 20px; padding-right:20px;">Load</button>
</div>
</form>

<div style="height:100%; background-color:#eeeeee;">

  <label class="label_radio" for="radio-show-wfs">
    <input name="rx" id="radio-show-wfs" value="1" type="radio" />
    WFS -- Only show datasets suitable for using as module inputs
  </label>
  <br>

  <label class="label_radio" for="radio-show-wms">
    <input name="rx" id="radio-show-wms" value="2" type="radio" />
    WMS -- Only show datasets suitable for mapping
  </label>
  <br>
  <label class="label_radio" for="radio-show-both">
    <input name="rx" id="radio-show-both" value="3" type="radio" checked/>
    Both -- Show all datasets on server
  </label>
</div>


<span style="padding-left: 5px;" id="probing-wms">Probing map server... <img src="/assets/loading_spinner.gif"></span>
<span style="padding-left: 5px;" id="probing-wfs">Probing feature server... <img src="/assets/loading_spinner.gif"></span>
<span style="padding-left: 5px;" id="probing-wcs">Probing coverage server... <img src="/assets/loading_spinner.gif"></span>

<div id="layer-display"></div>
